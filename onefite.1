.\" Automatically generated by Pod::To::Man 1.2.1
.\"
.pc
.TH onefite---Raku-script-interface-to-the-OneFit-Engine-(OFE) 1 "2025-10-31" "rakudo (2025.10)" "User Contributed Raku Documentation"
.SH "NAME"

.RS 4m
.EX
onefite \- Raku script interface to the OneFit\-Engine (OFE)
.EE
.RE
.SH "SYNOPSIS"

.RS 4m
.EX
onefite stands for OneFit Engine, OFE for short\&. It helps users to perform model fits to data\&.
It aims at obtaining the "best fit with just one go" keeping true to the fitteia motto:

"Keeping the simple easy, making the complex feasible, and getting the impossible within reach\&."
.EE
.RE
.SH "NOTE"

.RS 4m
.EX
This man page is expected to help you take full advantage of onefite on both the server and client sides\&.
.EE
.RE
.SH "DESCRIPTION"

.RS 4m
.EX
this is it
.EE
.RE
.SH "USAGE"

.SS Basic commands
.SH "ITEMIZE"
.RS 2n
.IP \(bu 2m
onefite
.RE

.RS 4m
.EX
onefite [\-h|\-\-help]

.EE
.RE
.P
Options

[\-h|\-\-help] Basic help
.RS 2n
.IP \(bu 2m
Uninstall
.RE

.RS 4m
.EX
onefite uninstall

.EE
.RE
.RS 2n
.IP \(bu 2m
Help on models
.RE

.RS 4m
.EX
onefite help <model> [\-q|\-\-quiet]
onefite help <model> <key> [\-q|\-\-quiet]

.EE
.RE
.P
Provides information on the <model> equation included in the models fitting library\&. Sub\-option <key> provides just the specific information on the key\&.

Options

[\-q|\-\-quiet] No screen print of log information
.RS 2n
.IP \(bu 2m
List models
.RE

.RS 4m
.EX
onefite list [\-q|\-\-quiet]
onefite list models [\-q|\-\-quiet]
onefite list aliases [\-q|\-\-quiet]

.EE
.RE
.P
Lists models included in the models fitting library and aliases defined in $HOME/\&.local/etc/aliases\&.json Lists just the models Lists just the aliases

Options

[\-q|\-\-quiet] No screen print of log information
.RS 2n
.IP \(bu 2m
Paths finder
.RE

.RS 4m
.EX
onefite path [\-s|\-\-src] [\-t] [\-e|\-\-examples] [\-b|\-\-bin] [\-l|\-\-lib] [\-c|\-C] [\-\-log] [\-a|\-\-aliases]

.EE
.RE
.P
Paths to OneFit\-Engine folders installed\&. Combined use with "cd" and "awk" in the examples below

Options

[\-s|\-\-src] Source [\-t] Raku test folder [\-e|\-\-examples] Examples folder [\-b|\-\-bin] Binaries folder [\-l|\-\-lib] Libraries folder [\-c|\-C] C code/F code folders [\-\-log] Log folder [\-a|\-\-aliases] Aliases folder

Examples

cd $(onefite path \-s) vi $(onefite path \-a)/aliases\&.json
.SS Files conversion
.SH "ITEMIZE"
.RS 2n
.IP \(bu 2m
sav <\-\-> json files conversion
.RE

.RS 4m
.EX
onefite convert <input\-filename> <output\-filename> [\-\-work\-folder=<Str>]

.EE
.RE
.P
Converts fitteia's sav files to OFE json files

Options

[\-\-work\-folder] Folder where the conversion will be performed

Examples

onefite convert some\-fitteia\-fit\&.sav ofe\-version\&.json
.SS OFE service commands
.SH "ITEMIZE"
.RS 2n
.IP \(bu 2m
Systemd service
.RE

.RS 4m
.EX
onefite service start [\-\-ip=<Str>] [\-d|\-\-systemd\-daemon] [\-p|\-\-port=<Int>]
onefite service stop

.EE
.RE
.P
[start] Is: sudo systemctl daemon\-reload; systemctl enable onefite\&.service; service onefite start [stop] Is: kill \-9 <start\-web\-engine> [\-\-ip=<Str>] Default '*'\&. For [\-\-macos] or [\-\-wsl] use \-\-ip=127\&.0\&.0\&.1 [\-p|\-\-port=<Int>] Default 8142\&. Check your Firewall just in case [\-d|\-\-systemd\-daemon] Default False\&. For [\-\-docker], [\-\-macos], or [\-\-wsl] keep the default\&.
.RS 2n
.IP \(bu 2m
LOG and PID services
.RE

.RS 4m
.EX
onefite service log
onefite service PID

.EE
.RE
.P
Shows OFE service log file Prints OFE Process Identifier
.RS 2n
.IP \(bu 2m
OFE manual web service
.RE

.RS 4m
.EX
onefite start\-web\-engine [\-\-ip[=Any]] [\-p|\-\-port[=Any]]
onefite stop\-web\-engine
(OBSOLETE) onefite start\-engine [\-\-no\-plot] [\-q|\-\-quiet] [\-\-work\-folder=<Str>]

.EE
.RE
.P
User command line to start/stop OFE web service
.SS Create command

.RS 4m
.EX
onefite create <function> <data\-files> \&.\&.\&. [\-\-data\-label|\-\-data\-labels=<Str>] [\-\-fit\-methods=<Str>] [\-\-tags=<Str>] [\-\-autox] [\-\-autoy] [\-\-autoxy] [\-\-logy|\-\-linlog] [\-\-logx|\-\-loglin] [\-\-logxy|\-\-loglog] [\-\-global] [\-\-R1] [\-\-sef\-R1\-file=<Str>] [\-\-fit\-if=<Str>] [\-\-plot\-if=<Str>] [\-\-set\-err|\-\-err=<Str>] [\-\-gfilt=<Int>] [\-\-range=<Str>] [\-\-SymbSize|\-\-ssz=<Str>] [\-\-save\-to|\-\-to=<Str>] [\-\-work\-folder=<Str>] [\-\-Num|\-\-npts[=Int]] [\-q|\-\-quiet]

.EE
.RE

.RS 4m
.EX
Creates a json file with the function and datafiles provided\&.

Function

The function syntax has the following rules:
    [ x < y ] Defines a range of values [ x ; y ], that is between x and y, inclusive\&. Spaces can be removed\&.
              '<' and ';' can be used as limit separators but '<' presents fewer escape issues in argument passing
    ':'  Initializing symbol
    '='  Fix a value

Example

    "Mz [\-1 < 1] ( t[1e\-3 < 10], M0:0\&.5[\-1<1], Mi=1[\-2<2], T1:0\&.5[1e\-3 < 10]) = Mi \+ (M0\-Mi)*exp(\-t/T1)"
    Mz is the dependent variable with a plot range from \-1 to 1\&. Mz is a function with arguments: t, M0, Mi, and T1
    t  is the independent variable with a plot range between 1e\-3 and 10
    M0 is a model parameter initialized to 0\&.5 and the non\-linear Least\-Squares minimization performed by CERN lib MINUIT will be restricted to the range [\-1;1]
    Mi is a model parameter with a fixed value 1 but a possible range [\-2;2]
    T1 is a model parameter initialized to 0\&.5 in a range [1e\-3; 10]

    The expression "Mi \+ (M0\-Mi)*exp(\-t/T1)" contains '\+' which sets plotting of individual model contributions to True

Options
.EE
.RE
.SS Fit commands

.RS 4m
.EX
onefite random <function> <data\-files> \&.\&.\&. [\-\-data\-label|\-\-data\-labels=<Str>] [\-\-tags=<Str>] [\-\-zip\-to=<Str>] [\-\-no\-plot] [\-\-autox] [\-\-autoy] [\-\-autoxy] [\-\-logy|\-\-linlog] [\-\-logx|\-\-loglin] [\-\-logxy|\-\-loglog] [\-\-global] [\-\-save\-to=<Str>] [\-\-work\-folder=<Str>] [\-\-Num|\-\-npts[=Int]]

onefite fit <function> <data\-files> \&.\&.\&. [\-\-data\-label|\-\-data\-labels=<Str>] [\-\-fit\-methods=<Str>] [\-\-tags=<Str>] [\-\-zip\-to=<Str>] [\-\-no\-plot] [\-\-autox] [\-\-autoy] [\-\-autoxy] [\-\-logy|\-\-linlog] [\-\-logx|\-\-loglin] [\-\-logxy|\-\-loglog] [\-\-global] [\-\-R1] [\-\-sef\-R1\-file=<Str>] [\-\-fit\-if=<Str>] [\-\-plot\-if=<Str>] [\-\-set\-err|\-\-err=<Str>] [\-\-gfilt=<Int>] [\-\-range=<Str>] [\-\-SymbSize|\-\-ssz=<Str>] [\-\-save\-to=<Str>] [\-\-work\-folder=<Str>] [\-\-Num|\-\-npts[=Int]] [\-q|\-\-quiet] [\-\-define\-alias|\-\-dali=<Str>] [\-\-aux\-code=<Str>]

onefite fit <input\-file> [\-\-fit\-methods=<Str>] [\-\-no\-plot] [\-\-autox] [\-\-autoy] [\-\-autoxy] [\-\-logy|\-\-linlog] [\-\-logx|\-\-loglin] [\-\-logxy|\-\-loglog] [\-\-save\-to|\-\-to=<Str>] [\-\-zip\-to=<Str>] [\-\-work\-folder=<Str>] [\-\-Num|\-\-npts[=Int]] [\-q|\-\-quiet] [\-\-define\-alias|\-\-dali=<Str>] [\-\-export]

onefite plot <input\-file> [\-\-autox] [\-\-autoy] [\-\-autoxy] [\-\-logy|\-\-linlog] [\-\-logx|\-\-loglin] [\-\-logxy|\-\-loglog] [\-\-work\-folder=<Str>] [\-\-Num|\-\-npts[=Int]]

.EE
.RE

.RS 4m
.EX
Options

[\-\-define\-alias|\-\-dali=<Str>] adds alias Str to the function used to fit the data in the \&./aliases\&.json file (overwrites existing alias)
[\-\-export] writes data and AuxCode to files for later use with: onefite fit <function>
[\-\-aux\-code] accepts the name of the file with the AuxCode and the new fitting functions declarations

Examples

onefite fit "Mz(t[1e\-3<20],M0,Mi,T1[1e\-3<10])=Mi\\+(M0\-Mi)*exp(\-t/T1)" file\&.hdf5 \-\-autox \-\-logx \-\-autoy
onefite fit "Mz(t[1e\-3<20],M0,Mi,T1[1e\-3<10])=Mi\\+(M0\-Mi)*exp(\-t/T1)" file\&.hdf5 \-\-autox \-\-logx \-\-autoy \-\-define\-alias=1exp

onefite fit "alias: 1exp" file\&.hdf5 \-\-autox \-\-logx \-\-autoy
onefite fit "a: 1exp" file\&.hdf5 \-\-autox \-\-logx \-\-autoy

onefite fit "a: 1exp" file\&.txt \-\-autox \-\-logx \-\-autoy
onefite fit "a: 2BPP" *\&.dat \-\-autox \-\-logx \-\-autoy \-\-logy
onefite fit "a: 1BPP" file\&.zip \-\-autox \-\-logx \-\-autoy \-\-logy
onefite fit "a: 1BPP" file\&.zip \-\-autox \-\-logx \-\-autoy \-\-logy
onefite fit "a: 1BPP" file\&.zip \-\-autox \-\-logx \-\-autoy \-\-logy \-\-define\-alias=1BPP
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="1\&.0"
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="1%"
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="std"
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="standard deviation"
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="std split at 5"
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="1% avg"
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="1% average"
onefite fit "y(x,a,b) = a \+ b*x" file\&.dat \-\-set\-err="10% avg split at 10\&.5"
.EE
.RE
.SS Version upgrade

.RS 4m
.EX
onefite upgrade [\-u|\-\-to\-user] [\-c|\-\-compile] [\-d|\-\-systemd\-daemon] [\-\-test=<Str>] [\-\-ip=<Str>] [\-p|\-\-port[=Int]] [\-m|\-\-merge\-site=<Str>] [\-\-cernlib] [\-\-shell] [\-\-shell\-port=<Int>] [\-\-wsl] [\-\-macos] [\-\-docker] [\-\-dpkg]


.EE
.RE

.RS 4m
.EX
At the host prompt run I<onefite update \-d \-\-shell \-\-test>

This will upgrade the current (main or dev) version of the OneFit\-Engine\&. github\&.com/fitteia/OneFit\-Engine\&.git
is downloaded and expanded\&. OneFit\-Engine/INSTALL is called with options \-\-systemd\-daemon and \-\-shell and \-\-test\&.
Port 8142 will be open to onefite requests\&.
Port 8100 will be open to shell command access via a web browser\&.

Options

[\-c|\-\-compile] Compile the OneFit\-Engine C and Fortran sources\&. Default True
[\-\-ip]          IP range access to the OneFit\-Engine web service\&. Default '*'
[\-p]            Port number for the OneFit\-Engine web service\&. Default 8142
[\-m|\-\-merge\-site=<Str>] Merge remote with local site <Str> sources\&. Default ''

[\-u|\-\-to\-user] Install OneFit\-Engine in the user space\&. Default False
[\-d|\-\-systemd\-daemon] Create a systemd service and install it\&. Default False
[\-\-test]       Run install tests\&. Default False
[\-\-cernlib]    Use Debian cernlib package or compile from source\&. Default False
[\-\-shell]      Install a web shell service (default port 8100 or \-\-shell\-port)\&. Default False
[\-\-shell\-port] Port number for the web shell service\&. Default 8100
[\-\-dpkg]       Run apt update by default\&. Use \-\-no\-dpkg otherwise

Use \-\-/<option> or \-\-no\-<option> to negate defaults (e\&.g\&., \-\-no\-test or \-\-/test)
.EE
.RE
.SS Test commands

.RS 4m
.EX
onefite test list
onefite test [<arr> \&.\&.\&.] [\-\-verbose|\-v] [\-d|\-\-systemd\-daemon] [\-p|\-\-post\-install]

.EE
.RE
.SH "PARAMETERS"

.SS File parameters
.SH "ITEMIZE"
.RS 2n
.IP \(bu 2m
input\-file \- name of the file to be converted (file extensions: \&.sav or \&.json)
.RE
.RS 2n
.IP \(bu 2m
output\-file \- name of the converted file (file extensions: \&.sav or \&.json)
.RE
.RS 2n
.IP \(bu 2m
data files \- one or more files including plain text ASCII (\&.dat, \&.txt)\&. Zip files are accepted\&. Special cases: Stelar S\&.R\&.l files (\&.sdf, \&.hdf5, \&.sef)\&.
.RE
.SS Fit methods
.SH "ITEMIZE"
.RS 2n
.IP \(bu 2m
fit\-methods \- simp scan min minos
.RE
.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	Bool :h(:$help), # help option true by default
)

.EE
.RE
.PP
Get onefite usage help

.SS class Bool :h(:$help)

.PP
help option true by default

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	Bool :$man = Bool::False, 
)

.EE
.RE
.PP
Get onefite man page

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"man", 
	Bool :m(:$man), 
)

.EE
.RE
.PP
Get onefite man page

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"list", 
	Bool :q(:$quiet) = Bool::False, # reduces output log info, false by default
)

.EE
.RE
.PP
Get onefite library models and aliases lists

.SS class Bool :q(:$quiet) = Bool::False

.PP
reduces output log info, false by default

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"list", 
	"models", 
	Bool :q(:$quiet) = Bool::False, 
)

.EE
.RE
.PP
Get onefite library models list

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"list", 
	"aliases", 
	Bool :q(:$quiet) = Bool::False, 
)

.EE
.RE
.PP
Get onefite library models aliases list

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"convert", 
	Str $input\-file where { \&.\&.\&. }, # name of the file to be converted (sav or json)
	Str $output\-file, # name of the converted file (sav or json)
	Str :$work\-folder = "\&.", # work folder for onefite convert
)

.EE
.RE
.PP
onefite convert sav <\-> json files

.SS class Str $input-file where { ... }

.PP
name of the file to be converted (sav or json)

.SS class Str $output-file

.PP
name of the converted file (sav or json)

.SS class Str :$work-folder = "."

.PP
work folder for onefite convert

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"path", 
	Bool :s(:$src) = Bool::False, # path to src
	Bool :$t = Bool::False, # path to test
	Bool :e(:$examples) = Bool::False, # path to examples
	Bool :b(:$bin) = Bool::False, # path to bin
	Bool :l(:$lib) = Bool::False, # path to lib
	Bool :c(:$C) = Bool::False, # path to C code
	Bool :$log = Bool::False, # path to log
	Bool :a(:$aliases) = Bool::False, 
)

.EE
.RE
.PP
Get onefite paths to src, etc

.SS class Bool :s(:$src) = Bool::False

.PP
path to src

.SS class Bool :$t = Bool::False

.PP
path to test

.SS class Bool :e(:$examples) = Bool::False

.PP
path to examples

.SS class Bool :b(:$bin) = Bool::False

.PP
path to bin

.SS class Bool :l(:$lib) = Bool::False

.PP
path to lib

.SS class Bool :c(:$C) = Bool::False

.PP
path to C code

.SS class Bool :$log = Bool::False

.PP
path to log

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"upgrade", 
	Bool :u(:$to\-user) = Bool::False, # install to user
	Bool :c(:$compile) = Bool::True, # compile before install
	Bool :d(:$systemd\-daemon) = Bool::False, # create a sysmtemd\-daemon service
	Bool :$cernlib = Bool::False, # install cern lib instead of just minuit\&.a from src
	Bool :$shell = Bool::False, # install shellinabox
	Int :$shell\-port = 8100, # shellinabox port
	Str :$ip = "*", # set IP
	Bool :$wsl = Bool::False, # subset of options for a Windows Subsystem Linux
	Bool :$macos = Bool::False, # subset of options for a MacOS native install with brew
	Bool :$docker = Bool::False, # subset of options for a MacOS colima/docker install
	Int :p(:$port) = 8142, # onefite service port
	Bool :$test = Bool::False, # perform tests
	Bool :apt(:apt\-get(:$dpkg)) = Bool::True, # run apt update/upgrade
	Str :m(:merge\-from(:merge\-with(:$merge\-site))) = "", # merge remote onefite main/dev branches with locl branch
)

.EE
.RE
.PP
onefite upgrade

.SS class Bool :u(:$to-user) = Bool::False

.PP
install to user

.SS class Bool :c(:$compile) = Bool::True

.PP
compile before install

.SS class Bool :d(:$systemd-daemon) = Bool::False

.PP
create a sysmtemd\-daemon service

.SS class Bool :$cernlib = Bool::False

.PP
install cern lib instead of just minuit\&.a from src

.SS class Bool :$shell = Bool::False

.PP
install shellinabox

.SS class Int :$shell-port = 8100

.PP
shellinabox port

.SS class Str :$ip = "*"

.PP
set IP

.SS class Bool :$wsl = Bool::False

.PP
subset of options for a Windows Subsystem Linux

.SS class Bool :$macos = Bool::False

.PP
subset of options for a MacOS native install with brew

.SS class Bool :$docker = Bool::False

.PP
subset of options for a MacOS colima/docker install

.SS class Int :p(:$port) = 8142

.PP
onefite service port

.SS class Bool :$test = Bool::False

.PP
perform tests

.SS class Bool :apt(:apt-get(:$dpkg)) = Bool::True

.PP
run apt update/upgrade

.SS class Str :m(:merge-from(:merge-with(:$merge-site))) = ""

.PP
merge remote onefite main/dev branches with locl branch

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"uninstall", 
)

.EE
.RE
.PP
onefite uninstall

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"service", 
	"start", 
	Bool :d(:$systemd\-daemon) = Bool::False, # start systemd\-daemon
	Str :$ip = "*", # accept access form IP
	Int :p(:$port) = 8142, # onefite werbservice port
)

.EE
.RE
.PP
onefite web service start

.SS class Bool :d(:$systemd-daemon) = Bool::False

.PP
start systemd\-daemon

.SS class Str :$ip = "*"

.PP
accept access form IP

.SS class Int :p(:$port) = 8142

.PP
onefite werbservice port

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"service", 
	"stop", 
)

.EE
.RE
.PP
onefite web service stop

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"service", 
	"log", 
)

.EE
.RE
.PP
onefite web service log

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"service", 
	"PID", 
)

.EE
.RE
.PP
get onefite service PID

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"stop\-web\-engine", 
)

.EE
.RE
.PP
onefite web service stop by removing service process

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"start\-web\-engine", 
	:$ip is copy, # run onefite web service in ip
	:p(:$port) = 8142, # onefite web service port
)

.EE
.RE
.PP
onefite web engine

.SS class :$ip is copy

.PP
run onefite web service in ip

.SS class :p(:$port) = 8142

.PP
onefite web service port

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"help", 
	Str $model, # model name
	Bool :q(:$quiet), # quiet for reduced log info
)

.EE
.RE
.PP
onefite help on models

.SS class Str $model

.PP
model name

.SS class Bool :q(:$quiet)

.PP
quiet for reduced log info

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"help", 
	Str $model, # model name
	Str $key, # model key info
	Bool :q(:$quiet), # quite for reduced log info
)

.EE
.RE
.PP
onefite help on model and keys

.SS class Str $model

.PP
model name

.SS class Str $key

.PP
model key info

.SS class Bool :q(:$quiet)

.PP
quite for reduced log info

.SS class Mu $

.PP
no plot

.SS class Mu $

.PP
Don't show log messages

.SS class Mu $

.PP
onefite engine work folder

.SS sub MAIN

.RS 4m
.EX
sub MAIN (
	"create", 
	Str $function is copy, # fitting function
	*@data\-files where { \&.\&.\&. }, 
	Str :data\-label(:$data\-labels), # data labels and values
	Str :$fit\-methods = "simp scan min minos", # minuit fit methods
	Str :$tags, # Data blocks TAGS
	Bool :$autox, # auto scale x
	Bool :$autoy, # auto scale y
	Bool :$autoxy, # auto scale both x and y
	Bool :logy(:$linlog), # logarithmic y scale
	Bool :logx(:$loglin), # logaroithmic x scale
	Bool :logxy(:$loglog), 
	Bool :$global = Bool::False, # global/individual
	Bool :ist\-ffc\-Mz(:$ist\-ffc) = Bool::False, # import Mz data from ist\-ffc
	Str :$fit\-if = "", # include fit if condition when fitting data
	Str :$plot\-if = "", # include plot if tag condition when plotting data and fitting curves
	Str :$sef\-R1\-file = "", # use file to get freqs when importing data from Stelar sef files
	Str :$range = "", # define range when importing data zones form Stelar data
	Bool :$R1 = Bool::False, # import R1 and not Mz data from ist\-ffc files
	Int :$gfilt, # used a Gaussian filter to smooth data
	Str :set\-err(:$err) = "", # set err in data files
	Str :SymbSize(:$ssz) where { \&.\&.\&. } = "1\&.0", # set size of symbols
	Str :save\-to(:$to), # write fit settings and results to json or sav file
	Str :$work\-folder = "\&.", # set a different work folder
	Int :Num(:$npts) = Code\&.new, # number of points in the theoretical curves
	Bool :q(:$quiet) = Bool::False, # reduce log output
	Str :AuxCode(:auxcode(:$aux\-code)) = "", # additional auxiliar code
	*%_, 
)

.EE
.RE
.PP
onefite create a json file from cmd line

.SS class Str $function is copy

.PP
fitting function

.SS class Str :data-label(:$data-labels)

.PP
data labels and values

.SS class Str :$fit-methods = "simp scan min minos"

.PP
minuit fit methods

.SS class Str :$tags

.PP
Data blocks TAGS

.SS class Bool :$autox

.PP
auto scale x

.SS class Bool :$autoy

.PP
auto scale y

.SS class Bool :$autoxy

.PP
auto scale both x and y

.SS class Bool :logy(:$linlog)

.PP
logarithmic y scale

.SS class Bool :logx(:$loglin)

.PP
logaroithmic x scale

.SS class Bool :$global = Bool::False

.PP
global/individual

.SS class Bool :ist-ffc-Mz(:$ist-ffc) = Bool::False

.PP
import Mz data from ist\-ffc

.SS class Str :$fit-if = ""

.PP
include fit if condition when fitting data

.SS class Str :$plot-if = ""

.PP
include plot if tag condition when plotting data and fitting curves

.SS class Str :$sef-R1-file = ""

.PP
use file to get freqs when importing data from Stelar sef files

.SS class Str :$range = ""

.PP
define range when importing data zones form Stelar data

.SS class Bool :$R1 = Bool::False

.PP
import R1 and not Mz data from ist\-ffc files

.SS class Int :$gfilt

.PP
used a Gaussian filter to smooth data

.SS class Str :set-err(:$err) = ""

.PP
set err in data files

.SS class Str :SymbSize(:$ssz) where { ... } = "1.0"

.PP
set size of symbols

.SS class Str :save-to(:$to)

.PP
write fit settings and results to json or sav file

.SS class Str :$work-folder = "."

.PP
set a different work folder

.SS class Int :Num(:$npts) = Code.new

.PP
number of points in the theoretical curves

.SS class Bool :q(:$quiet) = Bool::False

.PP
reduce log output

.SS class Str :AuxCode(:auxcode(:$aux-code)) = ""

.PP
additional auxiliar code


