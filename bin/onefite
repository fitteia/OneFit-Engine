#!/usr/bin/env raku

my $time = BEGIN { now }
END { say "Total execution time (s): " , now - INIT now }

say "Compile time: ", now - $time;

our constant OFE-PATH="%OFE-PATH%";

use OneFit;
use OneFit::Engine::Grammars;
use OneFit::Engine::Parameters;
use OneFit::Engine::Parfiles;
use OneFit::Engine::Stpfiles;
use Test;

use Cro::HTTP::Router;
use Cro::HTTP::Server;
use JSON::Fast;

my %*SUB-MAIN-OPTS = :named-anywhere, ;

multi MAIN (Bool :h(:help($))) {
#        say 'onefite is a script that implements fitteia.org fitting settings and fitting strategies in the form of a fiiting engine access√≠ble from the command line';

#    my $p= shell "onefite", :err;
#    say $p.err.slurp(:close);
    note qq:to/END_USAGE/;
    Usage:
        onefite [-h|--help]
	onefite upgrade [--test=<Str>]
	onefite list
	onefite list models
	onefite help <model> [
	onefite start-web-engine [--ip[=Any]] [-p|--port[=Any]]
	onefite convert <input-file> <output-file>
	onefite start-engine [--no-plot] [-q|--quiet] [--work-folder=<Str>]
	onefite create <function> [<data-files> ...] [--data-label|--data-labels=<Str>] [--tags=<Str>] [--autox] [--autoy] [--autoxy] [--linlog] [--loglin] [--loglog] [--global] [--save-to|--to=<Str>] [--work-folder=<Str>] [--Num|--npts[=Int]]
	onefite random <function> [<data-files> ...] [--data-label|--data-labels=<Str>] [--tags=<Str>] [--zip-to=<Str>] [--no-plot] [--autox] [--autoy] [--autoxy] [--linlog] [--loglin] [--loglog] [--global] [--save-to=<Str>] [--work-folder=<Str>] [--Num|--npts[=Int]]
	onefite fit <function> [<data-files> ...] [--data-label|--data-labels=<Str>] [--tags=<Str>] [--zip-to=<Str>] [--no-plot] [--autox] [--autoy] [--autoxy] [--linlog] [--loglin] [--loglog] [--global] [--save-to=<Str>] [--work-folder=<Str>] [--Num|--npts[=Int]]
	onefite fit <input-file> [--no-plot] [--autox] [--autoy] [--autoxy] [--linlog] [--loglin] [--loglog] [--save-to|--to=<Str>] [--work-folder=<Str>]
	onefite plot <input-file> [--autox] [--autoy] [--autoxy] [--linlog] [--loglin] [--loglog] [--work-folder=<Str>]
	onefite test list
	onefite test [<arr> ...]
  
	<input-file>     name of the file to be converted (.sav or .json)
	<output-file>    name of the converted file (.sav or .json)

	<function> syntax alternatives:
    \"y(x,a,b,c)=a + b*x + c*pow(x,2.0)\"
    \"y(t,A,lambda: 0.1)=A*exp(-lambda*t)\" 0.1 is the initial value to start mimimization
    \"y (t,A,B=2,lambda)=A * (1 - B*exp(-lambda*t) )\" B is fixed with value 2
    \"y( t,A, lambda: [0;0.5])=A*exp(-lambda*t)\" [lambda is limited to range 0 to 0.
    \"R1(f:[0;1e9], A, tau[0<1e-9])=A*tau/(1+pow(2*pi*f*tau,2.0)\" f is limite to positive values up to 1e9 and tau also
    \"y[-1;1](x:[0<1],a,b,c)=a + b*x + c*x*x\" theoretical curves generated for x is limited to range 0 to 1; in the plot y axis will be limited to range -1 to 1
    \"f(x,p1: 2, p2=0.3, p3[5;10]) :[-5;5]=p1*exp(-p2*x)*sin(2*pi*x/p3)\" p1 is initialized to 1, p2 is fixed to 2 p3 will be in the range 5 to 10
END_USAGE
}

multi MAIN ('list',
      	   Bool :q(:$quiet) = False,
	   ){
    my @list = dir(::('OFE-PATH') ~ "/C/local");
    @list.push: dir(::('OFE-PATH') ~ "/C/core/onefit-3.1/modelos").Slip;
    @list = @list.grep(*.f).grep(/\.c/)>>.basename>>.IO>>.extension('').sort;
    my $txt = "OneFit Engine Models Library:\n";
    $txt ~= @list.join("\n");
    say $txt unless $quiet;
    $txt;
}

multi MAIN ('list','models',
	   ){
	   MAIN('list');
}

multi MAIN ('convert',
	    $input-file where { $input-file.IO.e or die "$input-file dosen't exist!" }, #= name of the file to be converted (.sav or .json)
	    $output-file, #= name of the converted file (.sav or .json)
	   ) {
    my $eng = Engine.new.read($input-file).blocks(:r).parameters(:r).functions(:r).code(:write,:compile).save($output-file);
    exit;
}

multi MAIN ('upgrade',
      Str :$test = '--/test',
      ){
      shell "cd $*HOME/.local/OneFit-Engine && git stash && git pull && ./INSTALL $test"
}


multi MAIN ('start-web-engine',
	    :$ip = from-json(shell("ip -4 -br -j add",:out).out.slurp(:close)).tail<addr_info>.head<local>,
	    :p(:$port) = 8142,   
	   ){
    my $application = route {
	   get -> {
	       content 'text/html', q:to/HTML/;
               	<!DOCTYPE html>
            	<html>
           	 <head>
            	   <title>OneFit Engine Web Server</title>
            	 </head>
            	  <body>
            	     <h1>OneFit Engine Web Server</h1>

            	     <form action="/fit" method="post" enctype="multipart/form-data">
            	       Upload file [.json | .sav | data-file ] <input type="file" name="file"><br/>
		       Download: <input type="text" name="download" value="zip"><br/>
		       for data files: <br/>
		       fitting function: <input type="text" name="function" value=""><br/>
		       <table>
		       <tr><td>autox: </td><td><input name="autox" type="radio" value="yes"> yes </td><td><input type="radio" value="no" checked> no </td></tr>
		       <tr><td>autoy: </td><td><input name="autoy" type="radio" value="yes"> yes </td><td><input type="radio" value="np" checked> no </td></tr>
		       <tr><td>autoxy: </td><td><input name="autoxy" type="radio" value="yes"> yes </td><td><input type="radio" value="no" checked> no </td></tr>
		       <tr><td>loglog: </td><td><input name="loglog" type="radio" value="yes"> yes </td><td><input type="radio" value="no" checked> no </td></tr>
		       <tr><td>loglin: </td><td><input name="loglin" type="radio" value="yes"> yes </td><td><input type="radio" value="no" checked> no </td></tr>
		       <tr><td>linlog: </td><td><input name="linlog" type="radio" value="yes"> yes </td><td><input type="radio" value="no" checked> no </td></tr>
		       <tr><td>linlin: </td><td><input name="linlin" type="radio" value="yes"> yes </td><td><input type="radio" value="no" checked> no </td></tr>
		       </table>
           	       <button type="submit">fit</button>
            	     </form>
            	     <form action="/list" method="post" enctype="multipart/form-data">
           	       <button type="submit">list models</button>
            	     </form>
            	     <form action="/help" method="post" enctype="multipart/form-data">
           	       <button type="submit">help</button>
		       <input name="model" type="text" value="BPP" size=20>
		       <input name="cmd" type="text" values="" size=20>
            	     </form>

            	  </body>
            	 </html>
HTML
	}
	post -> 'list' {
	     content 'text/plain', "{ MAIN('list',:quiet) }\n"	
	}	
	post -> 'help' {
            request-body -> (:$model, *%rest) {
	    	if so %rest.kv {
		   for %rest.kv -> $k,$v { content 'text/plain', "{ MAIN('help',$model.Str, $v, :quiet) }\n"	  }
	    	}
		else { 	content 'text/plain', "{ MAIN('help',$model.Str,:quiet) }\n" }
	    }
	}	
	post -> 'fit' {
            request-body -> (:$file, *%rest) {
    		my $filename = $file.filename;
		my $folder = $filename.IO.extension('').Str;
		my $file-to-download = ""; 
		my $function = "";
		my $autox = "";
		my $autoy = "";
		my $autoxy= "";
		my $loglog= "";
		my $linlin= "";
		my $loglin= "";
		my $linlog= "";
		my $num   = +100;
		my $file-content = $file.body-blob;
		$filename.IO.spurt: $file-content.decode('UTF-8');
		if so %rest.kv {
		   for %rest.kv -> $k, $v {
		       if $k eq "download" {
		       	  if $v eq "zip" { $file-to-download = $filename.IO.extension('zip').Str }
			  else { $file-to-download = "$folder/$v" }
		       }
		       $function = $v.Str     if $k eq "function";
		       $num      = +$v.Str    if $k eq "Num";
		       $autox    = "--autox"  if $k eq "autox"  and $v eq any("yes",1);
		       $autoy    = "--autoy"  if $k eq "autoy"  and $v eq any("yes",1);
		       $autoxy   = "--autoxy" if $k eq "autoxy" and $v eq any("yes",1);
		       $loglog   = "--loglog" if $k eq "loglog" and $v eq any("yes",1);
		       $loglin   = "--loglin" if $k eq "loglin" and $v eq any("yes",1);
		       $linlog   = "--linlog" if $k eq "linlog" and $v eq any("yes",1);
		       $linlin   = "--linlin" if $k eq "linlin" and $v eq any("yes",1);
		   }
		}		
		my $txt;
		if so $function {
#		   say "onefite fit \"$function\" $filename $autox $autoy $autoxy $loglog $loglin $linlog $linlin --Num=$num --zip-to={ $filename.IO.extension('zip') } --save-to=$folder/$folder.json";
		   $txt = shell("onefite fit \"$function\" $filename $autox $autoy $autoxy $loglog $loglin $linlog $linlin --Num=$num --zip-to={ $filename.IO.extension('zip') } --save-to=$folder/$folder.json",:out).out.slurp(:close);
		}
		else { $txt = shell("onefite fit $filename --save-to=$folder/$folder.json",:out).out.slurp(:close) }
   		if $file-to-download.Bool {
#		   say "downloading file $file-to-download";		   			  
		   content 'application/octet-stream', $file-to-download.IO.slurp(:bin);
		}
		else { content 'text/plain', "File '$filename' uploaded and fitted.\n$txt\n" }

	     }
	}	
    }
    say "Starting onefite web service on $ip port $port";
    my Cro::Service $service = Cro::HTTP::Server.new:
			       host => $ip,
			       port => $port,
			       :$application;
    
    $service.start;
    
    react whenever signal(SIGINT) {
	      $service.stop;
	      exit;
    }
}


multi MAIN ('help',
	    $model,
            :$cmd,
	    Bool :q(:$quiet),
	   ){
    my @list = dir(::('OFE-PATH') ~ "/C/local");
    @list.push: dir(::('OFE-PATH') ~ "/C/core/onefit-3.1/modelos").Slip;
    @list = @list.grep(*.f).grep(/\.c/)>>.basename>>.IO>>.extension('').sort;
    my %meta-c = from-json( "{ ::('OFE-PATH') }/C/META-C.json".IO.slurp );	
    my %info = %meta-c{ @list.grep(/$model/).Str };
    my $txt="";
    if so $cmd { $txt = %info{ $cmd } }
    else { $txt = "$model => " ~ to-json(%info, :sorted-keys) }
    say $txt unless $quiet;
    $txt
}
 
multi MAIN ('start-engine',
	    Bool :$no-plot,
	    Bool :q(:$quiet)=False, # Don't show log messages
	    Str :$work-folder = '.'
	   ){
    my $supplier = Supplier.new;
    $supplier.Supply.tap: -> $f {
	start {
	    my $cmd = "plot";
	    $f ~~ /$<cmd>=(__fit__|__plot__|__fit\-only__)* $<file>=(\S+)/;
	    my $file = $<file>;
	    $cmd = $<cmd>.subst('__','',:g);
	    my $name = $file.subst(/\.sav|\.json/,'',:g);
	    shell "rm -fr $work-folder/$name" if "$work-folder/$name".IO.d;
	    "$work-folder/$name".IO.mkdir;
	    $f.IO.move("$work-folder/$name/$file");
	    my $engine = Engine.new.path("$work-folder/$name").read("$work-folder/$name/$file");
	    if $cmd ~~ /plot/ {
		my $time = now;
		say "start plotting $file";
		$engine.plot;
		say "finished plotting $file:", now - $time;
	    }
	    elsif $cmd ~~ /only/ {
		my $time = now;
		say "start fitting $file";
		$engine.fit(:no-plot($no-plot),:quiet($quiet)).save("$work-folder/$name/$name" ~ "-fit.json");
		say "finished fitting $file:", now - $time;
	    }
	    else {
		my $time = now;
		say "start fitting $file";
		$engine.fit(:no-plot($no-plot),:quiet($quiet)).save("$work-folder/$name/$name" ~ "-fit.json");
		say "finished fitting $file:", now - $time;
	    }
	    zip-fit($engine,$work-folder,$name);
	}
    }
    
    while True {
	my @files = dir('.').grep(*.f).grep(/\.sav|\.json/).words;
	for @files -> $file {
	    if now - $file.IO.changed > 1 { 
		$supplier.emit($file);
		sleep 1;
	    }
	    else {
		sleep 1;
	    }
	}
    }
    
}

multi MAIN  ('create',
	     Str  $function,
	     *@data-files where { @data-files.map({ .IO.e or die("$_ doesn't exist!")}) },
	     Str  :data-label(:$data-labels),
	     Str  :$tags,
	     Bool :$autox,
	     Bool :$autoy,
	     Bool :$autoxy,
	     Bool :$linlog,
	     Bool :$loglin,
	     Bool :$loglog,
	     Bool :$global,
	     Str  :save-to(:$to), # write fit settings to json or sav file"
	     Str  :$work-folder = '.',
             Int  :Num(:$npts) = +100
	    ){
    use JSON::Fast;
    
    my %e = parse-function($function.subst(/\n|\r/,'',:g), @data-files,$data-labels);
    %e<FitType>="Global" if $global;
    %e<Num>=$npts;
    my $engine = Engine.new.path("$work-folder").set(%e);
    $engine.blocks(
	:read,
	:fit,
	:export,
	:autox($autox),
	:autoy($autoy),
	:logx($loglin or $loglog),
	:logy($linlog or $loglog));
    $engine.parameters(:read).functions(:read).stp.code(:write,:compile);
    %e=$engine.h;
    %e<par-tables>:delete;
    if $to.defined { $engine.set(%e).save($to) }
    else { say to-json(%e, :sorted-keys) }
    exit;
}

multi MAIN  ('random',
	     Str  $function, 
	     *@data-files where { @data-files.map({ .IO.e or die("$_ doesn't exist!")}) },
	     Str  :data-label(:$data-labels),
	     Str  :$tags,
	     Str  :$zip-to,
	     Bool :$no-plot,
	     Bool :$autox,
	     Bool :$autoy,
	     Bool :$autoxy,
	     Bool :$linlog,
	     Bool :$loglin,
	     Bool :$loglog,
	     Bool :$global,
	     Str  :$save-to, # write fit settings to json or sav file 
	     Str  :$work-folder = '.',
	     Int  :Num(:$npts) = +100
	    ){
    my %e = parse-function($function.subst(/\n|\r/,'',:g), @data-files,$data-labels);
    %e<FitType>="Global" if $global;
    %e<Num>=$npts;
    for %e.kv -> $k, $v {
	if all($k.contains("Pval"), %e{$k.subst('val','max')}.Bool, %e{$k.subst('val','min')}.Bool) {
	    $k ~~ /Pval $<i>=(\d+)/;
	    %e{$k}= (%e{$k.subst('val','min')}.Real .. %e{$k.subst('val','max')}.Real).rand;
	    %e{'F' ~ $<i>.Str}= "Fix";
	}
    }
    my $name = ".";
    if $zip-to.Bool {
	$name = $zip-to.subst(/\.zip/,'',:g);
	shell "rm -fr $work-folder/$name" if "$work-folder/$name".IO.d;
	"$work-folder/$name".IO.mkdir;
	for @data-files { $_.IO.move("$work-folder/$name/$_") };
    }
    my $engine = Engine.new.path("$work-folder").set(%e);
    $engine.fit(
	:no-plot($no-plot),
	:autox($autox or $autoxy),
	:autoy($autoy or $autoxy),
	:logx($loglin or $loglog),
	:logy($linlog or $loglog)
    );
    $engine.save($save-to) if $save-to.defined;
    zip-fit($engine,$work-folder,$name) if $zip-to.Bool;
#    shell "pdftk { 'fit-curves-' <<~<< (1 ... $engine.blocks(:a).elems) >>~>> '.pdf' } cat output ./All.pdf";
    exit;
}

multi MAIN  ('fit',
	     Str  $function, 
	     *@data-files where { @data-files.map({ .IO.e or die("$_ doesn't exist!")}) },
	     Str  :data-label(:$data-labels),
	     Str  :$tags,
	     Str  :$zip-to,
	     Bool :$no-plot,
	     Bool :$autox,
	     Bool :$autoy,
	     Bool :$autoxy,
	     Bool :$linlog,
	     Bool :$loglin,
	     Bool :$loglog,
	     Bool :$global,
	     Str  :$save-to, # write fit settings to json or sav file 
	     Str  :$work-folder = '.',
	     Int  :Num(:$npts) = +100
	    ){
    my %e = parse-function($function.subst(/\n|\r/,'',:g), @data-files,$data-labels);
    %e<FitType>="Global" if $global;
    %e<Num>=$npts;
    my $name = ".";
    if $zip-to.Bool {
	$name = $zip-to.subst(/\.zip/,'',:g);
	shell "rm -fr $work-folder/$name" if "$work-folder/$name".IO.d;
	"$work-folder/$name".IO.mkdir;
	for @data-files { $_.IO.move("$work-folder/$name/$_") };
    }
    my $engine = Engine.new.path("$work-folder/$name").set(%e);
    $engine.fit(
	:no-plot($no-plot),
	:autox($autox or $autoxy),
	:autoy($autoy or $autoxy),
	:logx($loglin or $loglog),
	:logy($linlog or $loglog)
    );
    $engine.save($save-to) if $save-to.defined;
    zip-fit($engine,$work-folder,$name) if $zip-to.Bool;

    shell "cd $work-folder/$name && pdftk { 'fit-curves-' <<~<< (1 ... $engine.blocks(:a).elems) >>~>> '.pdf' } cat output ./All.pdf";

    exit;
}

multi MAIN  ('fit',
	     Str  $input-file where { $input-file.IO.e or die "$input-file dosen't exist!" }, #= name of the (.sav or .json) to compile
	     Bool :$no-plot,
	     Bool :$autox,
	     Bool :$autoy,
	     Bool :$autoxy,
	     Bool :$linlog,
	     Bool :$loglin,
	     Bool :$loglog,
	     Str  :save-to(:$to), # write fit settings to json or sav file 	     
	     Str  :$work-folder = '.'
	    ){
	    my $name = $input-file.subst(/\.sav|\.json/,'',:g);
	    shell "rm -fr $work-folder/$name" if "$work-folder/$name".IO.d;
	    "$work-folder/$name".IO.mkdir;
	    $input-file.IO.move("$work-folder/$name/$input-file");
	    my $engine = Engine.new.path("$work-folder/$name").read("$work-folder/$name/$input-file");
#	    my $engine = OFE::Engine.new.path("$work-folder").read($input-file);
	    $engine.fit(
		:no-plot($no-plot),
		:autox($autox or $autoxy),
		:autoy($autoy or $autoxy),
		:logx($loglin or $loglog),
		:logy($linlog or $loglog)
	    );
	    $engine.save($to) if $to.defined;
	    zip-fit($engine,$work-folder,$name);
	    shell "cd $work-folder/$name && pdftk { 'fit-curves-' <<~<< (1 ... $engine.blocks(:a).elems) >>~>> '.pdf' } cat output ./All.pdf";
	    exit;
}


multi MAIN  ('plot',
	     Str $input-file where { $input-file.IO.e or die "$input-file dosen't exist!" }, #= name of the (.sav or .json) to compile
	     Bool :$autox,
	     Bool :$autoy,
	     Bool :$autoxy,
	     Bool :$linlog,
	     Bool :$loglin,
	     Bool :$loglog,
	     Str  :$work-folder = '.'
	    ){
	    my $name = $input-file.subst(/\.sav|\.json/,'',:g);
	    shell "rm -fr $work-folder/$name" if "$work-folder/$name".IO.d;
	    "$work-folder/$name".IO.mkdir;
	    $input-file.IO.move("$work-folder/$name/$input-file");
	    my $engine = Engine.new.path("$work-folder/$name").read("$work-folder/$name/$input-file");
#	    my $engine = Engine.new.path("$work-folder").read($input-file);
	    $engine.plot(
		:autox($autox or $autoxy),
		:autoy($autoy or $autoxy)
		:logx($loglin or $loglog),
		:logy($linlog or $loglog)
	    );
	    zip-fit($engine,$work-folder,$name);
	    shell "cd $work-folder/$name && pdftk { 'fit-curves-' <<~<< (1 ... $engine.blocks(:a).elems) >>~>> '.pdf' } cat output ./All.pdf";
	    exit;
}


multi MAIN ('test','list') {
    my $test-path=OFE-PATH ~ "/t";
#    my $test-path=OFE-PATH.subst("rakumod/OFE","t");
    dir($test-path).grep(*.f).grep(/rakutest/).map( { .subst("$test-path/","",:g).say });
}	    

multi MAIN ('test',
	    *@arr
	   ){
    my $test-path=OFE-PATH ~ "/t";
#    my $test-path=OFE-PATH.subst("rakumod/OFE","t");

    if @arr.elems > 0 {
	my $fho = open :w, 'tests.log';
	@arr.race.map(
	    {
		my $test = "$_.rakutest" unless .contains(/rakutest/);
		say "testing....$test"; run "raku", "$test-path/$test" , :err<fho>
	    }
	);
	$fho.close;
	"tests.log".IO.slurp.say;
    }
    else {
	my $proc = run "prove6", "--lib", "$test-path","--err=ignore";
    }
    exit;
}

sub parse-function ($function, @data-files, $data-labels) {
    my %e = OneFit::Engine::Grammars::Function.parse-me($function);
    %e<FitType T Num> = <Individual dum 100>;
    %e<SelectedDataSet> = @data-files[0].subst(".dat","");
    for (1 .. @data-files.elems) {
	my @lines=@data-files[$_-1].IO.lines;
	my $label = "dum";
	my $dum=$_;
	$dum = @lines.head if @lines.head.words.elems < 2;
	if @lines.grep(/DATA/) {
	    $label = @lines.grep(/DATA/).split("=")[0].split("DATA")[1].words[0];
	    $dum = @lines.grep(/DATA/).split("=")[1];
	    %e<T> = $label;
	    shift @lines;
	}
	if @lines.grep(/TAG/) {
	    shift @lines;
	}
	if $data-labels.defined {
	    my $dum-parse = OneFit::Engine::Grammars::Label.parse($data-labels);
	    $label = $dum-parse<name>.Str;
	    %e<T> = $label;
	    if $dum-parse<values> > 0 { $dum = $dum-parse<values>[$_-1].Str.join(' ') }
	}
	%e<Dados> ~= "# DATA $label = $dum\n";
	%e<Dados> ~= "# TAG = { @data-files[$_-1].subst(".dat","") }\n";
	%e<Dados> ~= @lines.join("\n");
	%e<Tags>.push: @data-files[$_-1].subst(".dat","");
    }
    return %e;
}

sub zip-fit ($engine,$work-folder,$name) {
    shell "cd $work-folder/$name && pdftk { 'fit-curves-' <<~<< (1 ... $engine.blocks(:a).elems) >>~>> '.pdf' } cat output ./All.pdf";
    my $excluded =  { "$work-folder/$name/" <<~<< <AuxCode.* onefit-user *.h *.c *.o *_ gnu* *.stp> }().join(' ') ;
    "$name.zip".IO(:e).unlink;
    shell "cd $work-folder/$name && pdftk { 'fit-curves-' <<~<< (1 ... $engine.blocks(:a).elems) >>~>> '.pdf' } cat output ./All.pdf";
    shell "zip -q -r $name.zip $work-folder/$name -x $excluded";
}
