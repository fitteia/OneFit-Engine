#!/usr/bin/env raku

my %*SUB-MAIN-OPTS =  :named-anywhere, :allow-no, :bundling ;

our $SUDO = "sudo";

multi MAIN (
    Bool :$dpkg = True, # to install required debian packages
    Bool :w(:$web-server) = True, # to run tasksel install web-server
    Str  :$cpu is copy, # [amd64|arm64| defaults to "uname -a" detection 
    Bool :c(:$compile) = True, # to compile and install the OneFit engine core
    Bool :t(:$test) = True, # to run raku module tests
    Bool :i(:$install) = True, # to install OneFit-Engine as a raku modules available to all users
    Bool :U(:$Uninstall) = False, # to uninstall OneFit-Engine module					   
    Bool :p(:$p6-modules) = True, # attempt to install raku module Inline::Perl5
    Bool :g(:$enable-gs) = True, # enable ghostscript in ImageMagick-6 policy.xml
    Bool :s(:$to-site) is copy = True, # install raku module to site (use --/to-site to install-to user)
    Bool :u(:$to-user) = False, # if True --/dpkg -/w -/g --no-to-site
    Bool :d(:$systemd-daemon) = False, # if true runs sudo systemctl start onefite (or sudo service onefite start)			 
    Str  :b(:$bindir) = "$*CWD/../bin", # choose /home/<user>/bin if you want and make sure it is included in the PATH
){
    my %cpus = ("x86_64"  => "amd64",
		"aarch64" => "arm64"
		);

    shell "git stash";
    shell "git pull";
    
    $cpu = %cpus{ shell("uname -a",:out).out.slurp(:close).words.tail(2).head } unless so $cpu;

    my $pv =shell("perl -MConfig -e 'print \$Config\{archlib\}' | awk -F'/' '\{print \$NF\}'",:out).out.lines(:close).head;
    my $arch= shell("arch",:out).out.lines(:close).head;
    my $root=$*CWD;

    $to-site = False if $to-user;
    
    $SUDO = "" unless $to-site;

    uninstall() if $Uninstall;

    install-apt-packages($cpu) if $dpkg.Bool and $to-site;

    install-web-server if $web-server and $to-site;

    install-p6-modules($to-site) if $p6-modules.Bool;

    enable-ghostscript-in-ImageMagick-policy() if $enable-gs.Bool and $to-site;

    compile( root => $root, arch => $arch, bindir => $bindir, pv => $pv) if $compile;

    install( :test($test), :to-site($to-site), bindir => $bindir ) if $install;

    systemd-daemon() if $systemd-daemon and $to-site;

    add-show-ip-in-issue() if $to-site;
}

multi MAIN ('help') { MAIN :h }

multi MAIN (Bool :h(:help($))) {
    note qq:to/END_HELP/;
Usage:
    ./INSTALL [-h|--help]
      ./INSTALL [--dpkg] [--cpu] [-c|--compile] [-t|--test] [-i|--install] [-p|--inline-perl5] [-g|--enable-gs] \
                [-w|--web-server] [-U|--Uninstall] [--to-site] [--bindir=<Str>] [--systemd-daemon] [-u|--to-user] \
    --dpkg         # to install required debian packages
    --web-server   # to run tasksel install web-server
    --cpu          # cpu [amd64|arm64] defaults to automaic detection based on "uname -a"
    --compile      # to comlipe and install the OneFit engine core (use [-/c|--no-c|--/compile|--no-compile] to skip compiling)
    --test         # to run raku module tests (use [--/test|--no-test] to avoid test fase)
    --install      # to install OneFit-Engine as a raku modules available to all users
    --Uninstall    # to uninstall: use together with --to-site or --no-to-site
    --p6-modules   # to install raku module Inline::Perl5
    --enable-gs    # enable ghostsript in ImageMagick-6 policy.xml
    --to-site      # by default install raku module to site (use [--/to-site|--no-to-site] otherwise
    --to-user      # to install raku module to user ( sets --no-to-site --no-web-server --no-enable-gs  --no-dpkg)
    --bindir       # defaults to $*CWD/../bin (use --bindir=/\$HOME/bin to set another folder for binaries)
    --systemd-daemon # to create and start the onefite daemon service
    negated options:
    ex: use [-/c|--/compile]  or [--no-c|--no-compile] to negate option compile
END_HELP
}

sub cernpkgs ($cpu) {
    my @a = <cernlib-base_20061220+dfsg3-4.4_all.deb
	     cernlib-base-dev_20061220+dfsg3-4.4_all.deb
	     libkernlib1-gfortran_20061220+dfsg3-4.4_amd64.deb
	     libkernlib1-dev_20061220+dfsg3-4.4_amd64.deb
	     libpacklib1-gfortran_20061220+dfsg3-4.4_amd64.deb
	     libmathlib2-gfortran_20061220+dfsg3-4.4_amd64.deb
	     libpacklib1-dev_20061220+dfsg3-4.4_amd64.deb
	     libmathlib2-dev_20061220+dfsg3-4.4_amd64.deb>;
    @a.map( { .subst("amd64",$cpu) })
}

sub aptpkgs () {
    <libperl-dev
    swig
    gcc
    dpkg-dev
    libgfortran5
    cfortran
    gfortran
    grace
    imagemagick
    texlive-font-utils
    ghostscript
    libcgi-pm-perl
    zip
    pdftk
    sudo
    raku
    curl
    libssl-dev
    liblapack3
    libblas3
    libblas-dev
    libatlas-base-dev
    libatlas3-base
    hdf5-tools
    tasksel>
}


sub apt-pkgs-not-installed (@pkgs) {
    my @a=shell("apt list --installed",:out,:err).out.lines(:close);
    @a.map({ $_ = $_.split("/").head });
    gather for @pkgs {
	my $pkg = $_.split("_").head;
	take $pkg unless grep($pkg,@a)
    }
}

sub install-apt-packages ($cpu) {
    my @apt-pkgs-to-install = apt-pkgs-not-installed(aptpkgs());
    if so @apt-pkgs-to-install {
	run "sudo", "apt", "install" , @apt-pkgs-to-install; 
    }
    my @required-cern-pkgs = cernpkgs($cpu);
    my @cernlib-pkgs-to-install = apt-pkgs-not-installed(@required-cern-pkgs);
    if so @cernlib-pkgs-to-install {
	my @pkgs-to-install = gather for @cernlib-pkgs-to-install {
	    take @required-cern-pkgs.grep(/$_"_"/).head if  @required-cern-pkgs.grep(/$_"_"/);
	}
	my @pkgs-to-download = "http://ftp.de.debian.org/debian/pool/main/c/cernlib/" <<~<< @pkgs-to-install;
	shell "cd /tmp && curl -O " ~ @pkgs-to-download.join(" -O ");
	shell "cd /tmp && sudo apt install ./" ~ @pkgs-to-install.join(" ./"); 
    }
}

sub install-web-server () {
    "$*HOME/public_html".IO.mkdir unless "$*HOME/public_html".IO.d;
    shell "chmod 711 $*HOME && chmod 755 $*HOME/public_html";
    my $is-installed = so shell("tasksel --list-tasks",:out).out.lines(:close).grep(/web\-server/).words[0] eq "i";
    do {
	say "tasksel install Web-server and SSH-server";
	shell "sudo apt install task-ssh-server task-web-server";
    } unless $is-installed;
    shell "sudo a2enmod userdir";
    shell "sudo systemctl restart apache2";
}


sub install-p6-modules ($to-site) {
    say "Install raku modules. This may take some time....";
    shell("$SUDO zef install Inline::Perl5 { '--install-to=site ' if $to-site } ") if shell("zef locate Inline::Perl5",:out).out.slurp(:close).contains("Nothing located");
    shell("$SUDO zef install --/test cro { '--install-to=site ' if $to-site } ") if shell("zef locate Cro::HTTP:Router",:out).out.slurp(:close).contains("Nothing located");
}

sub enable-ghostscript-in-ImageMagick-policy () {
#    say "ATTENTION: editting /etc/ImageMagick-6/policy.xml to enable ghostscript formats";
    my @policy-file="/etc/ImageMagick-6/policy.xml".IO.lines;
    @policy-file.map( { $_ = "\<!-- $_ --\>" if $_.contains(any(<"PS" "PS2" "PS3" "EPS" "PDF" "XPS">)) and $_ !~~ /'<!--'/ });
    "/tmp/policy.xml".IO.spurt(@policy-file.join("\n") ~ "\n");
    shell "sudo cp /etc/ImageMagick-6/policy.xml /etc/ImageMagick-6/policy.xml-bak; sudo mv /tmp/policy.xml /etc/ImageMagick-6/policy.xml";
}

sub compile (:$root,:$arch,:$bindir,:$pv) {
    say "install source in $*CWD and binaries with perl version: $pv";
    shell "make MROOT=$root ARCH=$arch PERLVERSION=$pv BINDIR=$bindir install";
    shell "find . -name .precomp -prune -o -name .git -prune -o -name .gitignore -prune -o -name .prove -prune -o -name .travis.yml -prune -o -name Makefile -prune -o -name \"*~\" -prune -o -name bugs -prune -o -type f -print | sort | cut -c 3- > MANIFEST";
}

sub uninstall () {
    shell "sudo rm /usr/local/bin/onefite" if '/usr/local/bin/onefite'.IO.l;
    shell("cd $*CWD/../bin && rm onefite") if "$*CWD/../bin/onefite".IO.l;
    my @binaries = "$*CWD/C/core/onefit-3.1/makefile".IO.lines.grep(/install <ws> cop/).words;
    for @binaries.splice(1,@binaries.elems-2).push('pcop') {
	shell "cd /usr/local/bin { { '&& sudo rm ' ~ $_ } if {'/usr/local/bin/' ~ $_}().IO.l } ";
    }
    shell "$SUDO zef uninstall OneFit-Engine && zef uninstall OneFit-Engine";
    exit;
}

sub install (:$test,:$to-site, :$bindir) {
    if $to-site {
	"Installing to site".say
    }
    else {
	"Installing to user".say
    }
    "$*CWD/../log".IO.mkdir unless "$*CWD/../log".IO.e;
    my @previous = shell("zef locate OneFit-Engine",:out).out.slurp(:close).lines;
    for @previous {
	if $_.Bool {
	    do {
		my $yesno;
		$yesno = prompt "$_ located, do you wish to remove it [y|n]?";
		shell "$SUDO zef uninstall OneFit-Engine" if $yesno ~~ m:i/y/;
		shell "$SUDO rm /usr/local/bin/onefite" if '/usr/local/bin/onefite'.IO.l;
	    } unless $_.contains("Nothing located");
	}
    }

    shell("cd /usr/local/bin && sudo rm onefite") if '/usr/local/bin/onefite'.IO.l;
    shell("cd $*CWD/../bin && rm onefite") if "$*CWD/../bin/onefite".IO.l;

    if $test.Bool {
	"/tmp/OneFit-Engine-test".IO.mkdir;
	shell("$SUDO zef -v { '--install-to=site ' if $to-site } install ./");
	my $onefite-bin = "/usr/lib/perl6/site/bin/onefite";
	$onefite-bin = "$*HOME/.raku/bin/onefite" if "$*HOME/.raku/bin/onefite".IO.e;
	if $to-site {
	    shell("cd /usr/local/bin && sudo ln -s  $onefite-bin") if $onefite-bin.IO.e
	}
	else {
	    shell("cd $*CWD/../bin && ln -s  $onefite-bin") if $onefite-bin.IO.e
	}
	shell "rm -fr /tmp/OneFit-Engine-test" if "/tmp/OneFit-Engine-test".IO.e;
    }
    else {
	shell("$SUDO zef -v --/test { '--install-to=site ' if $to-site } install ./");
	my $onefite-bin = "/usr/lib/perl6/site/bin/onefite";
	$onefite-bin = "$*HOME/.raku/bin/onefite" if "$*HOME/.raku/bin/onefite".IO.e;
	if $to-site {
	    shell("cd /usr/local/bin && sudo ln -s  $onefite-bin") if $onefite-bin.IO.e
	}
	else {
	    shell("cd $*CWD/../bin && ln -s  $onefite-bin") if $onefite-bin.IO.e
	}
    }

    my @binaries = "$*CWD/C/core/onefit-3.1/makefile".IO.lines.grep(/install <ws> cop/).words;
    if $to-site {
	for @binaries.splice(1,@binaries.elems-2).push('pcop') {
	    shell "cd /usr/local/bin { { '&& sudo rm ' ~ $_ } if {'/usr/local/bin/' ~ $_}().IO.l } && sudo ln -s { $bindir ~'/' ~ $_ }" if "$bindir/$_".IO.f;
	}
    }

}

sub systemd-daemon() {
    "/tmp/onefite.service".IO.spurt: "[Unit]
Description=OneFite Engine Server
After=network.target 
Documentation=https://github.com/fitteia/OneFit-Engine

[Service]
Type=forking
ExecStart=/usr/local/bin/onefite service start
ExecStop=/usr/local/bin /onefite service stop
Restart=always
WorkingDirectory=/home/ofe/public_html
User=ofe
Group=ofe
[Install]
WantedBy=multi-user.target
";
    shell "sudo cp /tmp/onefite.service /etc/systemd/system/";
}

sub add-show-ip-in-issue() {
    my $issue="/etc/issue".IO.slurp(:close);
    say "cp /etc/issue /tmp && sudo awk \'/^Debian/ && !/\\\\4/ \{print \$0 \" \\\\4\\n\"\}\' \>\/etc\/issue" unless $issue.contains('\4'); 
}
