#!/usr/bin/env raku

my %*SUB-MAIN-OPTS =  :named-anywhere, :allow-no, :bundling ;

our $SUDO = "sudo";

our $DOCKER = False;

our $OS = "LINUX";

multi MAIN (
 	Bool :$dpkg is copy = True, # to install required debian packages
   	Bool :w(:$web-server) is copy = True, # to run tasksel install web-server
   	Str  :$cpu is copy, # [amd64|arm64| defaults to "uname -a" detection 
   	Bool :c(:$compile) = True, # to compile and install the OneFit engine core
   	Bool :t(:$test) is copy = True, # to run raku module tests
   	Bool :i(:$install) = True, # to install OneFit-Engine as a raku modules available to all users
   	Bool :U(:$Uninstall) = False, # to uninstall OneFit-Engine module					   
   	Bool :p(:$p6-modules) = True, # attempt to install raku module Inline::Perl5
   	Bool :g(:$enable-gs) is copy = True, # enable ghostscript in ImageMagick policy.xml
   	Bool :s(:$to-site) is copy = True, # install raku module to site (use --/to-site to install-to user)
   	Bool :u(:$to-user) = False, # if True --/dpkg -/w -/g --no-to-site
   	Bool :d(:$systemd-daemon) is copy = False, # if true runs sudo systemctl start onefite (or sudo service onefite start)			 
   	Bool :$cernlib = False, # by default it NOT will not install the cernlib packages (Later the user has to modify the ./OneFit-Engine/etc/OFE/default/makefile MINUIT variable settings
   	Bool :$shell = False, # by default it NOT will install shellinabox service in port 8100
   	Bool :$git = True, # By default it runs git to pull the package for remote repository
	Bool :$wsl = False, # Flag for a WSL2 Install ( --/test --/post-test --/web-server --/system-daemon --/dpkg )
	Bool :$macos = False, # Flag for a MacOS Install ( --/test --/post-test --/web-server --/system-daemon --/dpkg )
	Bool :$docker = False, # Flag for a Docker Install ( --/test --/post-test --/web-server --/system-daemon --/dpkg )
	Bool :$post-test is copy = True; # Run post install tests
	Bool :$man-page = True; # Install man page
   	Str  :$ip is copy = '*',
   	Int  :$port = 8142,
   	Int  :$shell-port = 8100,
  	Str  :b(:$bindir) = "$*CWD/../bin", # choose /home/<user>/bin if you want and make sure it is included in the PATH
   	Str  :m(:$merge-site)='', # if merge string then merge site branch (it it exits) into current branch
	){
   	
	my %cpus = ("x86_64"  => "amd64", "aarch64" => "arm64", "arm64" => "arm64");

   	if $git {
		shell "git stash";
		shell "git pull";
		shell 'git merge -m "$merge-site" site' if $merge-site.Bool and shell("git branch",:out).out.slurp(:close).contains('site').Bool;
   	}
   
  	$cpu = %cpus{ shell("uname -a",:out).out.slurp(:close).words.tail( $macos ?? 1 !! 2  ).head.Str } unless so $cpu;
	
   	my $pv =shell("perl -MConfig -e 'print \$Config\{archlib\}' | awk -F'/' '\{print \$NF\}'",:out).out.lines(:close).head;
   	my $perlcore =shell("perl -MConfig -e 'print \"\$Config\{archlib\}/CORE\"'",:out).out.lines(:close).head;
   	my $arch= shell("arch",:out).out.lines(:close).head;
   	my $root=$*CWD;

   	$to-site = False if $to-user;
   
   	$SUDO = "" unless $to-site;

	if $docker {
		$DOCKER = $docker;
		$web-server = False;
		$test = False;
		$systemd-daemon = False;
		$dpkg = False;
		$post-test = False;
	}
	if $wsl {
		$DOCKER = True;
		$web-server = False;
		$test = False;
		$systemd-daemon = False;
		$post-test = False;
	}
	if $macos {
		shell("cpan CGI");
		my @brew-packages=<
			jq
			swig
			gcc
			grace
			imagemagick
			texlive
			ghostscript
			zip
			pdftk-java
			openssl
			hdf5
			gnuplot
		>;
	#	for @brew-packages {
	#		say "installing $_";
	#		shell("brew install $_");
	#	}
	#	shell "zef install App::Prove6";
		$DOCKER = True;
		$web-server = False;
		$test = False;
		$systemd-daemon = False;
		$post-test = False;
		$OS = "MacOSX";
		$dpkg = False;
		$enable-gs = False;
		$ip="127.0.0.1";
	}


   	uninstall() if $Uninstall;

   	install-apt-packages($cpu,:cernlib($cernlib)) if $dpkg.Bool and $to-site;

   	shellinabox($shell, $shell-port); 

   	install-web-server if $web-server and $to-site;

   	install-p6-modules($to-site, test => $test) if $p6-modules.Bool;

	enable-ghostscript-in-ImageMagick-policy() if $enable-gs.Bool and $to-site;

   	compile( root => $root, arch => $arch, bindir => $bindir, perlcore => $perlcore ) if $compile;

   	install( :test($test), :to-site($to-site), bindir => $bindir ) if $install;

   	if "$bindir/../etc/aliases.json".IO.e {
		say "$bindir/../etc/aliases.json has been changed not updating" if shell("diff $*CWD/etc/OFE/default/aliases.json $bindir/../etc/aliases.json",:out).out.slurp(:close).so; 
   	}	
   	else {
		install-aliases( bindir => $bindir );
   	}	

   	systemd-daemon($ip,$port) if $systemd-daemon and $to-site;
   	
	add-show-ip-in-issue() if $to-site and !$DOCKER;
	
   	run-post-install-tests(:daemon($systemd-daemon), port => $port) if $post-test;

	install-manpage(macos => $macos) if $man-page;
}

multi MAIN ('help') { MAIN :h }

multi MAIN (Bool :h(:help($))) {
    note qq:to/END_HELP/;
Usage:
    ./INSTALL [-h|--help]
      ./INSTALL [--dpkg] [--cpu] [-c|--compile] [-t|--test] [-i|--install] [-p|--inline-perl5] [-g|--enable-gs] \
                [-w|--web-server] [-U|--Uninstall] [--to-site] [--bindir=<Str>] [--systemd-daemon] [-u|--to-user] \
				[--wsl] [--docker] [--man-page] [--post-test]
    --dpkg         # to install required debian packages
    --web-server   # to run tasksel install web-server
    --cpu          # cpu [amd64|arm64] defaults to automaic detection based on "uname -a"
    --compile      # to comlipe and install the OneFit engine core (use [-/c|--no-c|--/compile|--no-compile] to skip compiling)
    --test         # to run raku module tests (use [--/test|--no-test] to avoid test fase)
    --install      # to install OneFit-Engine as a raku modules available to all users
    --Uninstall    # to uninstall: use together with --to-site or --no-to-site
    --p6-modules   # to install raku module Inline::Perl5
    --enable-gs    # enable ghostsript in ImageMagick policy.xml
    --to-site      # by default install raku module to site (use [--/to-site|--no-to-site] otherwise
    --to-user      # to install raku module to user ( sets --no-to-site --no-web-server --no-enable-gs  --no-dpkg)
    --bindir       # defaults to $*CWD/../bin (use --bindir=/\$HOME/bin to set another folder for binaries)
    --systemd-daemon # to create and start the onefite daemon service
    --cernlib      # False by default it will NOT install the cernlib packages (Later the user has to modify the ./OneFit-Engine/etc/OFE/default/makefile MINUIT variable settings
    --shell        # False by default it will NOT install shellinabox service
    --shell-port   # shellinabox service port (defaults to 8100)
    --git          # by default it runs git pull. Use --no-git to avoid git pull 
    --post-test    # Run post tests
    --man-page 	   # Install onefite man page
    --docker       # set options for a Docker install ( --/test --/post-test --/web-server --/system-daemon --/dpkg )
    --wsl          # set options for a WSL2 install ( --/test --/post-test --/web-server --/system-daemon --/dpkg )
    --macos        # set options for a MacOS install ( --/test --/post-test --/web-server --/system-daemon --/dpkg )
    --ip = '*'     # creates the onefite.service for all IPv4 interfaces
    --port = 8142  # onefite web service service port defaults to 8142
    --merge-site=<Str> # merge git site files with git main/dev files when updating
		 
    negated options:
    ex: use [-/c|--/compile]  or [--no-c|--no-compile] to negate option compile
END_HELP
}

sub cernpkgs ($cpu) {
	my @a = <
		cernlib-base_20061220+dfsg3-4.4_all.deb
		cernlib-base-dev_20061220+dfsg3-4.4_all.deb
     	libkernlib1-gfortran_20061220+dfsg3-4.4_amd64.deb
     	libkernlib1-dev_20061220+dfsg3-4.4_amd64.deb
     	libpacklib1-gfortran_20061220+dfsg3-4.4_amd64.deb
     	libmathlib2-gfortran_20061220+dfsg3-4.4_amd64.deb
    	libpacklib1-dev_20061220+dfsg3-4.4_amd64.deb
     	libmathlib2-dev_20061220+dfsg3-4.4_amd64.deb
		>;
    	@a.map( { .subst("amd64",$cpu) })
}

sub aptpkgs () {
   	<
	libperl-dev
   	swig
   	gcc
   	dpkg-dev
   	gfortran
   	grace
   	imagemagick
   	texlive-font-utils
   	ghostscript
   	libcgi-pm-perl
   	zip
   	pdftk
   	sudo
   	curl
	jq
   	libssl-dev
   	hdf5-tools
   	tasksel
	>
}

#### these packages are required by cernlib #####
#
#    libgfortran5
#    cfortran
#    liblapack3
#    libblas3
#    libblas-dev
#    libatlas-base-dev
#    libatlas3-base
#
#################################################

sub apt-pkgs-not-installed (@pkgs) {
   	my @a=shell("apt list --installed",:out,:err).out.lines(:close);
   	@a.map({ $_ = $_.split("/").head });
   	gather for @pkgs {
	my $pkg = $_.split("_").head;
		take $pkg unless grep($pkg,@a)
    }
}

sub install-apt-packages ($cpu,:$cernlib) {
 	my @apt-pkgs-to-install = apt-pkgs-not-installed(aptpkgs());
   	if so @apt-pkgs-to-install {
		run "sudo", "apt-get", "update";
		run "sudo", "apt-get", "install" , @apt-pkgs-to-install; 
   	}	
   	if $cernlib {
		my @required-cern-pkgs = cernpkgs($cpu);
		my @cernlib-pkgs-to-install = apt-pkgs-not-installed(@required-cern-pkgs);
		if so @cernlib-pkgs-to-install {
	    		my @pkgs-to-install = gather for @cernlib-pkgs-to-install {
				take @required-cern-pkgs.grep(/$_"_"/).head if  @required-cern-pkgs.grep(/$_"_"/);
	    	}
	    	my @pkgs-to-download = "http://ftp.de.debian.org/debian/pool/main/c/cernlib/" <<~<< @pkgs-to-install;
	    	shell "cd /tmp && curl -O " ~ @pkgs-to-download.join(" -O ");
	    	shell "cd /tmp && sudo apt install ./" ~ @pkgs-to-install.join(" ./"); 
		}
		say "the OneFit-Engine/etc/OFE/default/makefile has to be changed if you plan to use the minuit routine from the debian installed package";
    }
    shell "sudo apt-get update && sudo apt-get upgrade && sudo apt-get autoremove && sudo apt-get clean";
}

sub install-web-server () {
   	"$*HOME/public_html".IO.mkdir unless "$*HOME/public_html".IO.d;
   	"$*HOME/public_html/ofe".IO.mkdir unless "$*HOME/public_html/ofe".IO.d;
   	shell "chmod 711 $*HOME && chmod 755 $*HOME/public_html && chmod 755 $*HOME/public_html/ofe";
   	my $is-installed = so shell("tasksel --list-tasks",:out).out.lines(:close).grep(/web\-server/).words[0] eq "i";
   	do {
		say "tasksel install Web-server and SSH-server";
		shell "sudo apt install task-ssh-server task-web-server";
   	} unless $is-installed;
   	shell "sudo a2enmod userdir" unless $DOCKER;
   	shell "sudo systemctl restart apache2" unless $DOCKER;
}


sub install-p6-modules ($to-site,:$test) {
	shell("$SUDO apt install perl6-zef") unless shell("command -v zef").so;
	say "Install raku modules. This may take some time....";
   	shell("$SUDO zef install Inline::Perl5 --force-test { '--/test' unless $test } { '--install-to=site ' if $to-site } ") if shell("zef locate Inline::Perl5",:out).out.slurp(:close).contains("Nothing located");
   	shell("$SUDO zef install cro --force-test { '--/test' unless $test } { '--install-to=site ' if $to-site } ") if shell("zef locate Cro::HTTP:Router",:out).out.slurp(:close).contains("Nothing located");
 	shell("$SUDO zef install Pod::To::Man --force-test { '--/test' unless $test }  { '--install-to=site ' if $to-site } ");
}

sub enable-ghostscript-in-ImageMagick-policy () {
#    say "ATTENTION: editting /etc/ImageMagick-*/policy.xml to enable ghostscript formats";
   	my $ImageMagick-policy-folder = "/etc".IO.dir.grep(/ImageMagick/).tail.Str;
   	my @policy-file="$ImageMagick-policy-folder/policy.xml".IO.lines;
   	@policy-file.map( { $_ = "\<!-- $_ --\>" if $_.contains(any(<"PS" "PS2" "PS3" "EPS" "PDF" "XPS">)) and $_ !~~ /'<!--'/ });
   	"/tmp/policy.xml".IO.spurt(@policy-file.join("\n") ~ "\n");
   	shell "sudo cp $ImageMagick-policy-folder/policy.xml $ImageMagick-policy-folder/policy.xml-bak; sudo mv /tmp/policy.xml $ImageMagick-policy-folder/policy.xml";
}

sub compile (:$root,:$arch,:$bindir,:$pv,:$perlcore) {
   	say "download  CERNLIB minuit package into $*CWD/../minuit, compile and install libminuit.a in $*CWD/lib";
   	shell "git clone https://github.com/fitteia/minuit.git $*CWD/../minuit" unless "$*CWD/../minuit/".IO.d(:e);
    #shell "cd $*CWD/../minuit && git pull && cd $*CWD/../minuit && patch -p1 < minuit.patch && make install && make clean && patch -R -p1 < minuit.patch";
   	shell "cd $*CWD/../minuit && git pull && cd $*CWD/../minuit && make install && make clean";
   	say "install source in $*CWD and binaries with perl version: $pv";
  	shell "make OS=$OS MROOT=$root ARCH=$arch PERLVERSION=$pv BINDIR=$bindir install" if $pv.so;
  	shell "make OS=$OS MROOT=$root ARCH=$arch PERLCORE=$perlcore BINDIR=$bindir install" if $perlcore.so;
   	shell "find . -name .precomp -prune -o -name .git -prune -o -name .gitignore -prune -o -name .prove -prune -o -name .travis.yml -prune -o -name Makefile -prune -o -name \"*~\" -prune -o -name bugs -prune -o -type f -print | sort | cut -c 3- > MANIFEST";
}

sub uninstall () {
   	shell "sudo rm /usr/local/bin/onefite" if '/usr/local/bin/onefite'.IO.l;
   	shell("cd $*CWD/../bin && rm onefite") if "$*CWD/../bin/onefite".IO.l;
   	my @binaries = "$*CWD/C/core/onefit-3.1/makefile".IO.lines.grep(/install <ws> cop/).words;
   	for @binaries.splice(1,@binaries.elems-2).push('pcop') {
		shell "cd /usr/local/bin { { '&& sudo rm ' ~ $_ } if {'/usr/local/bin/' ~ $_}().IO.l } ";
   	}
   	shell "$SUDO zef uninstall OneFit-Engine && zef uninstall OneFit-Engine";
	shell "$SUDO rm /usr/share/man/man1/onefite.1.gz";
   	exit;
}

sub install (:$test,:$to-site, :$bindir) {
    if $to-site {
		"Installing to site".say
    }
    else {
		"Installing to user".say
    }
    "$*CWD/../log".IO.mkdir unless "$*CWD/../log".IO.e;
    my @previous = shell("zef locate OneFit-Engine",:out).out.slurp(:close).lines;
    for @previous {
		if $_.Bool {
	   		do {
				my $yesno='y';
				$yesno = prompt "$_ located, do you wish to remove it [y|n]?";
				shell "$SUDO zef uninstall OneFit-Engine" if $yesno ~~ m:i/y/;
				shell "$SUDO rm /usr/local/bin/onefite" if '/usr/local/bin/onefite'.IO.l;
	   		} unless $_.contains("Nothing located");
		}
   	}

   	shell("cd /usr/local/bin && sudo rm onefite") if '/usr/local/bin/onefite'.IO.l;
   	shell("cd $*CWD/../bin && rm onefite") if "$*CWD/../bin/onefite".IO.l;

    if $test.Bool {
		"/tmp/OneFit-Engine-test".IO.mkdir;
		shell("$SUDO zef -v { '--install-to=site ' if $to-site } install ./");
#	my $onefite-bin = "/usr/lib/perl6/site/bin/onefite";
		if $to-site {
	    	my $onefite-bin = CompUnit::RepositoryRegistry.repository-for-name("site") ~ "/bin/onefite";
	    	$onefite-bin = "$*HOME/.raku/bin/onefite" if "$*HOME/.raku/bin/onefite".IO.e;
	    	shell("cd /usr/local/bin && sudo ln -s  $onefite-bin") if $onefite-bin.IO.e
		}
		else {
	    	my $onefite-bin = CompUnit::RepositoryRegistry.repository-for-name("home") ~ "/bin/onefite";
	    	$onefite-bin = "$*HOME/.raku/bin/onefite" if "$*HOME/.raku/bin/onefite".IO.e;
	    	shell("cd $*CWD/../bin && ln -s  $onefite-bin") if $onefite-bin.IO.e
		}
		shell "rm -fr /tmp/OneFit-Engine-test" if "/tmp/OneFit-Engine-test".IO.e;
    }
    else {
		shell("$SUDO zef -v --/test { '--install-to=site ' if $to-site } install ./");
#        my $onefite-bin = "/usr/lib/perl6/site/bin/onefite";
		if $to-site {
	    	my $onefite-bin = CompUnit::RepositoryRegistry.repository-for-name("site") ~ "/bin/onefite";
            $onefite-bin = "$*HOME/.raku/bin/onefite" if "$*HOME/.raku/bin/onefite".IO.e;
	    	shell("cd /usr/local/bin && sudo ln -s  $onefite-bin") if $onefite-bin.IO.e
		}
		else {
	    	my $onefite-bin = CompUnit::RepositoryRegistry.repository-for-name("home") ~ "/bin/onefite";
            $onefite-bin = "$*HOME/.raku/bin/onefite" if "$*HOME/.raku/bin/onefite".IO.e;
	    	shell("cd $*CWD/../bin && ln -s  $onefite-bin") if $onefite-bin.IO.e
		}
    }

    my @binaries = "$*CWD/C/core/onefit-3.1/makefile".IO.lines.grep(/install <ws> cop/).words;
    if $to-site {
		for @binaries.splice(1,@binaries.elems-2).push('pcop') {
	    	shell "cd /usr/local/bin { { '&& sudo rm ' ~ $_ } if {'/usr/local/bin/' ~ $_}().IO.l } && sudo ln -s { $bindir ~'/' ~ $_ }" if "$bindir/$_".IO.f;
		}
    }

}

sub install-aliases (:$bindir) {
    shell("mkdir $bindir/../etc/") unless "$bindir/../etc/".IO.d;
    "$*CWD/etc/OFE/default/aliases.json".IO.copy: "$bindir/../etc/aliases.json";
}


sub systemd-daemon($ip,$port) {
    "/tmp/onefite.service".IO.spurt: "[Unit]
Description=OneFite Engine Server
Wants=network-online.target
After=network.target network-online.target
Documentation=https://github.com/fitteia/OneFit-Engine

[Service]
Type=forking
ExecStart=/usr/local/bin/onefite service start --ip=$ip --port=$port
ExecStop=/usr/local/bin/onefite service stop
Restart=always
WorkingDirectory=/home/%*ENV<USER>/public_html
User=%*ENV<USER>
Group=%*ENV<USER>
[Install]
WantedBy=multi-user.target
";
	shell "sudo cp /tmp/onefite.service /etc/systemd/system/";
	unless $DOCKER {
	    shell "sudo cp /tmp/onefite.service /etc/systemd/system/";
	    shell "sudo systemctl daemon-reload";
	    shell "sudo systemctl enable onefite.service";
	    say "onefite service daemon created for IPv4 $ip and port $port:

    1) sudo service onefite start
    2) sudo onefite upgrade -d (for future upgrades)
    3) onefite test (when needed)

	    ";
	} 
}

sub add-show-ip-in-issue() {
    my $issue = "/etc/issue".IO.slurp.subst(/'\l'\s*'\4'*/,'\l \4');
    "/tmp/issue".IO.spurt: $issue ~ "\n\n";
    shell "sudo cp \/tmp\/issue /etc" unless "/etc/issue".IO.slurp(:close).contains('\4'); 
}

sub shellinabox(Bool $shell, $shell-port) {
    my $shellinabox-installed-is=shell("apt list --installed",:out,:err).out.slurp(:close).contains(/shellinabox/).Bool;
	if $shell {
		if not $shellinabox-installed-is {
			say "\nInstalling shellinabox as a web service in port $shell-port";
			shell("sudo apt install shellinabox && sudo service shellinabox stop");
		}
		else {
			shell "sudo service shellinabox stop";
		}
		my $port = "/etc/default/shellinabox".IO.lines(:close).grep(/PORT/).split("=").tail;
		shell("sudo sed -i 's/$port/$shell-port/g' /etc/default/shellinabox && sudo systemctl daemon-reload"); 
		shell "sudo service shellinabox start";
	}
	else {
		shell("sudo apt purge shellinabox") if $shellinabox-installed-is;
		say "shellinabox package removed";
	}
}

sub install-manpage( :$macos = False ) {
	"onefite.1".IO.spurt: shell("raku --doc=Man $*CWD/bin/onefite",:out).out.lines(:close).grep({ !/Total' 'execution/ }).join("\n");
	"onefite.1".IO.spurt: "\n\n" ~ shell("$*CWD/bin/onefite -v",:out).out.lines.join("\n"), :append;
    "onefite.1.gz".IO(:e).unlink;
	say "onefite man page: onefite.1.gz";
	if $SUDO {
   		if $macos {
   			shell("$SUDO cp onefite.1 /usr/local/share/man/man1/");	
			say "onefite.1 man page install in /usr/local/share/man/man1/";
		}
		else {
			shell("gzip -9 onefite.1");
   			shell("$SUDO cp onefite.1.gz /usr/share/man/man1/");	
			say "onefite.1.gz man page install in /usr/share/man/man1/";
		}
	}
}



sub run-post-install-tests(Bool :$daemon = False, :$port = 8142) {
    my $data = q:to/EOT/;
# DATA dum = 40616
# TAG = zone12
# R1 = 16.9554
2.4 0.4950845801988824 1
1.60968 0.5030929382053178 1
1.07962 0.5071383400239955 1
0.724101 0.5192948321930172 1
0.485656 0.5160022771910805 1
0.32573 0.5291235757829099 1
0.218468 0.5350239458592603 1
0.146527 0.5898993575693909 1
0.098276 0.6180204586347606 1
0.065914 0.6826722682863811 1
0.044208 0.752954560068173 1
0.029651 0.8279391722256552 1
0.019887 0.8918345724621874 1
0.013338 0.9470250641189731 1
0.008946 0.9713798167045512 1
0.006 1.0 1.0 
EOT

    say "Running post-install tests...";
    "/tmp/zone12.dat".IO.spurt: $data;
	my $service = shell("systemctl status onefite.service",:out).out.slurp(:close).contains("active (running)");
	if $daemon {
		if $service {
			my $proc= Proc::Async.new($SUDO, 'systemctl', 'stop', 'onefite.service');
			$proc.stdout.tap(-> $v { print "Output: $v" });
			$proc.stderr.tap(-> $v { print "Err: $v" });
			await $proc.start;
			say "onefite service stoped";
		}
		my $proc = Proc::Async.new($SUDO, 'systemctl', 'start', 'onefite.service');
		$proc.stdout.tap(-> $v { print "Output: $v" });
		$proc.stderr.tap(-> $v { print "Err: $v" });
		await $proc.start;
		say "onefite service started" if shell("systemctl status onefite.service",:out).out.slurp(:close).contains("active (running)");
	
    	wait-for-port('127.0.0.1', $port, 10 ,1);
	
		my $result = "curl --silent -F \"file=\@zone12.dat\" -F \"autox=yes\" -F \"logx=yes\" -F \"function=Mz[-2<2](t,M0,Mi,T1[0.01<3])=Mi \\+ (M0-Mi)*exp(-t/T1)\" http://127.0.0.1:8142/fit --output ofe-test.log";
	    say $result;
	    $result = shell("cd /tmp && $result");
	    $result = "/tmp/ofe-test.log".IO.slurp(:close) if "/tmp/ofe-test.log".IO.e;
	    say $result;
	    if $result.contains("zone12, 16") {
			say "localhost web service works OK";
	    }
	    else {
			say "localhost web service error!";
	    }
	}
	else {
		if $service { say "onefite service status unchanged: is running" }
		else 	{
		   	my $pid = shell("onefite service PID",:out).out.slurp(:close);
			if $pid.so {
				say "onefite is running with PID: $pid";
				my $result = "curl --silent -F \"file=\@zone12.dat\" -F \"autox=yes\" -F \"logx=yes\" -F \"function=Mz[-2<2](t,M0,Mi,T1[0.01<3])=Mi \\+ (M0-Mi)*exp(-t/T1)\" http://127.0.0.1:8142/fit --output ofe-test.log";
	    		say $result;
	    		$result = shell("cd /tmp && $result");
	    		$result = "/tmp/ofe-test.log".IO.slurp(:close) if "/tmp/ofe-test.log".IO.e;
	    		say $result;
	    		if $result.contains("zone12, 16") { say "localhost web service works OK"; }
	    		else { say "localhost web service error!"; }
			}					
			else { say "onefite is not running. Consider: 'sudo systemctl start onefite.service' first, or 'onefite service start'"; } 
		}
	}
	my &fileowner = { my $file = $^a; shell("ls { $file.IO.d ?? '-ld' !! '-la'} $file | awk '\{print \$3\}'",:out).out.slurp(:close) };
	</tmp/ofe-tmp>.map({ $_.IO.e and fileowner($_).contains("root") ?? shell("sudo rm -fr $_") !! shell("rm -fr $_") });

	my $result = shell("cd /tmp/ && onefite fit \"Mz[-2<2](t,M0,Mi,T1[0.01<3])=Mi \+ (M0-Mi)*exp(-t/T1)\" zone12.dat --no-stelar-hdf5 --autox --logx", :out).out.slurp(:close);
	say $result;
	if $result.contains("zone12, 16") {
	    say "command line onefite OK\n\n";
	}
	else {
	    say "command line onefite error!\n\n";
	}
#	my &fileowner = { my $file = $^a; shell("ls { $file.IO.d ?? '-ld' !! '-la'} $file | awk '\{print \$3\}'",:out).out.slurp(:close) };
#	my $SUDO="";
#	$SUDO = "sudo" if any( (fileowner("/tmp/ofe-tmp"), fileowner("/tmp/ofe-test.log"), fileowner("/tmp/OneFit-Engine-test"), fileowner("/tmp/zone12.dat"))>>.contains("root"));
#	shell "$SUDO rm -fr /tmp/OneFit-Engine-test /tmp/zone12.dat /tmp/ofe-test.log " if "/tmp/zone12.dat".IO.e;
	</tmp/ofe-tmp /tmp/OneFit-Engine-test /tmp/zone12.dat /tmp/ofe-test.log>.map({ $_.IO.e and fileowner($_).contains("root") ?? shell("sudo rm -fr $_") !! shell("rm -fr $_") });
}

sub wait-for-port(Str:D $host, Int:D $port, Int:D $timeout = 30, Int:D $interval = 1) {
    my $start = now;

    loop {
        try {
            my $socket = IO::Socket::INET.new(:host($host), :port($port));
            if $socket.defined {
                $socket.close;
                say "Port $port on $host is open!";
                return True;
            }
        }
        CATCH {
            default {
                # Ignoring exception — just retrying
            }
        }

        if (now - $start) > $timeout {
            say "Timeout: Port $port on $host did not open within $timeout seconds.";
            return False;
        }

        sleep $interval;
    }
}

