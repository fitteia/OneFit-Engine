#!/usr/bin/env raku

my $time = BEGIN { now }
END { say "Total execution time (s): " , now - INIT now }

say "Compile time: ", now - $time;

use OneFit;
use OneFit::Engine::Parameters;
use OneFit::Engine::Parfiles;
use OneFit::Engine::Stpfiles;
use Test;

our constant OFE-PATH="%OFE-PATH%";
my $test-path=OFE-PATH ~"/t";
my $eng = Engine.new.read("$test-path/1/test1.sav");


my class OutputCapture {
    has @!lines;
    
    method print (\s) { @!lines.append(s) }
    method captured () { @!lines.join }
}

plan 5;

subtest 'convert', {
    plan 1;
    $time = now;
    $eng.save("test1.json");
    is "test1.json".IO.slurp, "$test-path/1/test1.json".IO.slurp, "convert sav to json works! ({ now - $time } sec)";;
}

subtest 'compile', {
    plan 1;
    $time = now;
    my $output = do {
	my $*OUT = OutputCapture.new;
	$eng.blocks(:r).functions(:r).code(:w,:c);
	$*OUT.captured;
    }
    is $output, "C code extracted compiled OK!\n", "compile works! ({ now - $time } sec)";
}

subtest 'blocks', {
    plan 16;
    
    dir('.', :test(/\.dat/)).race.map({ $_.unlink if $_.IO.f });
    $eng.blocks(:r) :export;
    
    for (1 .. 13).race {
	$time = now; 
	is "data{$_}.dat".IO.slurp, "$test-path/1/data{$_}.dat".IO.slurp, "data: read and export {$_} works! ({ now -$time } s)";
    }
    
    $time = now; 
    OneFit::Engine.new.read("$test-path/3/test3.sav").blocks(:r,:a)[2].export;
    is "data3.dat".IO.slurp, "$test-path/3/data3-constant-err.dat".IO.slurp, "data: e_y is constnat works! ({ now -$time } s)";
    
    $time = now; 
    OneFit::Engine.new.read("$test-path/3/test3.sav").blocks(:r,:a)[2].E(:ey<1>).export;
    is "data3.dat".IO.slurp, "$test-path/3/data3-err-1.dat".IO.slurp, "data: set e_y to 1 works! ({ now -$time } s)";
    
    $time = now; 
    OneFit::Engine.new.read("$test-path/3/test3.sav").blocks(:r,:a)[2].E(ey=>"0.001",:ex<0.01>).export;
    is "data3.dat".IO.slurp, "$test-path/3/data3.dat".IO.slurp, "data: e_x propagates to e_y works! ({ now -$time } s)";
    
}

#subtest 'parameters', {
#    plan 3;
#    $time = now;
#    $eng = OneFit::Engine.new.read("$test-path/2/test2.sav").parameters :r;
#    my $parfile = OneFit::Engine::Parfiles::Parfile.new;
#    is $parfile.update($eng.par-selected.table).get.join("\n"), "$test-path/2/test2.par".IO.slurp, "parameters: create parfile works! ({ now -$time } s)" ;
#    $time = now;
#    is $parfile.update($eng.par-selected.table,:FIXALL).get.join("\n"), "$test-path/2/test2-fixed-all.par".IO.slurp, "parameters: fix all! ({ now -$time } s)" ;;
#    $time = now;
#    is $parfile.update($eng.par-selected.table,:FIXNONE).get.join("\n"), "$test-path/2/test2-fixed-none.par".IO.slurp, "parameters: fix none! ({ now -$time } s)" ;;
#}

subtest 'stpfile', {
    #	todo "not ready";
    plan 5;
    $time = now;
    $eng = OneFit::Engine.new.read("$test-path/1/test1.sav").blocks(:r).functions :r;
    is OneFit::Engine::Stpfiles::Stpfile.new.read($eng).get[0], "$test-path/1/fitenv.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
    $time = now;
    $eng = OneFit::Engine.new.read("$test-path/2/test2.sav").blocks(:r).functions :r;
    is OneFit::Engine::Stpfiles::Stpfile.new.read($eng).get[0], "$test-path/2/fitenv.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
    $time = now;
    $eng = OneFit::Engine.new.read("$test-path/4/test4.sav").blocks(:r).functions :r;
    is OneFit::Engine::Stpfiles::Stpfile.new.read($eng).get[0], "$test-path/4/fitenv.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
    $time = now;
    $eng = OneFit::Engine.new.read("$test-path/5/test5.sav").blocks(:r).functions :r;
    is OneFit::Engine::Stpfiles::Stpfile.new.read($eng).get[0], "$test-path/5/fitenv1.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
    $time = now;
    $eng = OneFit::Engine.new.read("$test-path/5/test5.sav").blocks(:r).functions :r;
    is OneFit::Engine::Stpfiles::Stpfile.new.read($eng).get[1], "$test-path/5/fitenv2.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
}

