#!/usr/bin/env raku

my $time = BEGIN { now }
END { say "Total execution time (s): " , now - INIT now }

say "Compile time: ", now - $time;

use OneFit;
use OneFit::Engine::Stpfiles;
use Test;

my $test-path=$*CWD ~ "/t";
my $eng = OneFit::Engine.new.read("$test-path/1/test1.sav");


my class OutputCapture {
    has @!lines;
    
    method print (\s) { @!lines.append(s) }
    method captured () { @!lines.join }
}

plan 5;

subtest '1',{
    plan 2;
    $time = now;
    $eng = Engine.new.read("$test-path/1/test1.sav").blocks(:r,:q).functions :r;
    is Stpfile.new.update($eng).get[0], "$test-path/1/fitenv.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";

    $time = now;
    $eng = OneFit::Engine.new.read("$test-path/1/test1a.sav").blocks(:r,:q).functions :r;
    is Stpfile.new.update($eng).get[0], "$test-path/1/fitenv1a.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
}

subtest '2',{
    plan 1;
    $time = now;
    $eng = Engine.new.read("$test-path/2/test2.sav").blocks(:r,:q).functions :r;
    is Stpfile.new.update($eng).a[0], "$test-path/2/fitenv.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
}

subtest '3',{
    plan 1;
    $time = now;
    $eng = Engine.new.read("$test-path/4/test4.sav").blocks(:r,:q).functions :r;
    is Stpfile.new.update($eng).arr[0], "$test-path/4/fitenv.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
}

subtest '4', {
    plan 1;
    $time = now;
    $eng = Engine.new.read("$test-path/5/test5.sav").blocks(:r,:q).functions :r;
    is Stpfile.new.update($eng).get[0], "$test-path/5/fitenv1.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
}

subtest '5',{
    plan 1;
    $time = now;
    $eng = Engine.new.read("$test-path/5/test5.sav").blocks(:r).functions :r;
    is Stpfile.new.update($eng).get[1], "$test-path/5/fitenv2.stp".IO.slurp, "stpfile: create works! ({ now -$time } s)";
}



