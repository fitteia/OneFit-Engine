#!/usr/bin/env raku

my $time = BEGIN { now }
END { say "Total execution time (s): " , now - INIT now }

say "Compile time: ", now - $time;

use OneFit;
use OneFit::Engine::Parfiles;
use Test;

our constant OFE-PATH="%OFE-PATH%";

my $test-path=OFE-PATH ~ "/t";

my class OutputCapture {
    has @!lines;
    
    method print (\s) { @!lines.append(s) }
    method captured () { @!lines.join }
}


plan 5;
$time = now;
my $eng = Engine.new.path("/tmp").read("$test-path/2/test2.sav").blocks(:r).parameters :r;
my $parfile = Parfile.new;
is $parfile.write($eng.par-selected.table).get.join("\n"), "$test-path/2/test2.par".IO.slurp, "parameters: create parfile works! ({ now -$time } s)" ;

$time = now;
is $parfile.write($eng.par-selected.table,:fix-all).get.join("\n"), "$test-path/2/test2-fixed-all.par".IO.slurp, "parameters: fix all! ({ now -$time } s)" ;;

$time = now;
is $parfile.write($eng.par-selected.table,:fix-none).get.join("\n"), "$test-path/2/test2-fixed-none.par".IO.slurp, "parameters: fix none! ({ now -$time } s)" ;;

$time = now;
#dir('.', :test(/\.par/)).race.map({ $_.unlink if $_.IO.f; say $_});
$eng = Engine.new.read("$test-path/7/test7.sav").blocks(:r).parameters: :r;
is $parfile.write($eng.par-selected.table,:fix-none,:No<1>).get.join("\n"), "$test-path/7/fit1.par".IO.slurp, "parameters: fix none! ({ now -$time } s)" ;;

$time = now;
$eng = Engine.new.path("/tmp").read("$test-path/8/test8.sav").fit;
is "/tmp/fit.out".IO.slurp, "$test-path/8/fit.out".IO.slurp, "parameters: reads from output! ({ now -$time } s)" ;;

$time = now;



