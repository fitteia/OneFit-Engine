#!/usr/bin/env raku

my $time = BEGIN { now }
END { say "Total execution time (s): " , now - INIT now }

say "Compile time: ", now - $time;

use OneFit;
use Test;

our constant OFE-PATH="%OFE-PATH%";
my $workfolder="/tmp/OneFit-Engine-test";
$workfolder.IO.mkdir unless $workfolder.IO.d;

my $test-path=OFE-PATH ~ "/t";

my class OutputCapture {
    has @!lines;
    
    method print (\s) { @!lines.append(s) }
    method captured () { @!lines.join }
}

my %cpus = ("x86_64"  => "amd64",
		"aarch64" => "arm64"
	   );

my $cpu = %cpus{ shell("uname -a",:out).out.slurp(:close).words.tail(2).head };

plan 3;

dir('.', :test(/\.par|c|out|agr|agr\-par|log/)).race.map({ $_.unlink if $_.IO.f });
my $eng = OneFit::Engine.new.path("$workfolder").read("$test-path/7/test7.sav")
		     .blocks(:r,:e)
		     .parameters(:r)
		     .functions(:r)
		     .stp
		     .code(:w,:c);
$time = now;
for (1 .. $eng.blocks.a.elems).race {
    shell "cd $workfolder; ./onefit-user -@fitenv$_.stp -f data$_.dat <fit$_.par >fit$_.log 2>&1";
}
is "$workfolder/fit1.log".IO.slurp(enc => 'utf8-c8'), "$test-path/7/fit1.log-$cpu".IO.slurp(enc => 'utf8-c8'), "individual fit 1: OK! ({ now -$time } s)";

$time = now;
$eng.parameters(:r,:from-output).agr;
for (1 .. $eng.blocks.a.elems).race {
    shell "cd $workfolder; ./onefit-user -@fitenv$_.stp -nf -pg -ofit$_.out --grbatch=PDF data$_.dat <fit$_.par >plot$_.log 2>&1; cp fit-residues-1.res fit-residues-$_.res-tmp";
}
for (1 .. $eng.blocks.a.elems).race {
    shell "cd $workfolder ; cp fit-residues-$_.res-tmp fit-residues-$_.res" ;
}
is "$workfolder/fit40.log".IO.slurp(enc => 'utf8-c8'), "$test-path/7/fit40.log-$cpu".IO.slurp(enc => 'utf8-c8'), "individual plot 40: OK! ({ now -$time } s)" ;

is is "$workfolder/fit19.out".IO.slurp(enc => 'utf8-c8'), "$test-path/7/fit19.out".IO.slurp(enc => 'utf8-c8'), "individual plot 19 output: OK! ({ now -$time } s)" ;




